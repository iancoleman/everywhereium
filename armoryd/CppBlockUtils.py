# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_CppBlockUtils', [dirname(__file__)])
        except ImportError:
            import _CppBlockUtils
            return _CppBlockUtils
        if fp is not None:
            try:
                _mod = imp.load_module('_CppBlockUtils', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _CppBlockUtils = swig_import_helper()
    del swig_import_helper
else:
    import _CppBlockUtils
del version_info
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

class SwigPyIterator:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CppBlockUtils.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _CppBlockUtils.SwigPyIterator_value(self)
    def incr(self, n = 1): return _CppBlockUtils.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _CppBlockUtils.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _CppBlockUtils.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _CppBlockUtils.SwigPyIterator_equal(self, *args)
    def copy(self): return _CppBlockUtils.SwigPyIterator_copy(self)
    def next(self): return _CppBlockUtils.SwigPyIterator_next(self)
    def __next__(self): return _CppBlockUtils.SwigPyIterator___next__(self)
    def previous(self): return _CppBlockUtils.SwigPyIterator_previous(self)
    def advance(self, *args): return _CppBlockUtils.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _CppBlockUtils.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _CppBlockUtils.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _CppBlockUtils.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _CppBlockUtils.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _CppBlockUtils.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _CppBlockUtils.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _CppBlockUtils.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vector_int:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_int, name)
    __repr__ = _swig_repr
    def iterator(self): return _CppBlockUtils.vector_int_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _CppBlockUtils.vector_int___nonzero__(self)
    def __bool__(self): return _CppBlockUtils.vector_int___bool__(self)
    def __len__(self): return _CppBlockUtils.vector_int___len__(self)
    def pop(self): return _CppBlockUtils.vector_int_pop(self)
    def __getslice__(self, *args): return _CppBlockUtils.vector_int___getslice__(self, *args)
    def __setslice__(self, *args): return _CppBlockUtils.vector_int___setslice__(self, *args)
    def __delslice__(self, *args): return _CppBlockUtils.vector_int___delslice__(self, *args)
    def __delitem__(self, *args): return _CppBlockUtils.vector_int___delitem__(self, *args)
    def __getitem__(self, *args): return _CppBlockUtils.vector_int___getitem__(self, *args)
    def __setitem__(self, *args): return _CppBlockUtils.vector_int___setitem__(self, *args)
    def append(self, *args): return _CppBlockUtils.vector_int_append(self, *args)
    def empty(self): return _CppBlockUtils.vector_int_empty(self)
    def size(self): return _CppBlockUtils.vector_int_size(self)
    def clear(self): return _CppBlockUtils.vector_int_clear(self)
    def swap(self, *args): return _CppBlockUtils.vector_int_swap(self, *args)
    def get_allocator(self): return _CppBlockUtils.vector_int_get_allocator(self)
    def begin(self): return _CppBlockUtils.vector_int_begin(self)
    def end(self): return _CppBlockUtils.vector_int_end(self)
    def rbegin(self): return _CppBlockUtils.vector_int_rbegin(self)
    def rend(self): return _CppBlockUtils.vector_int_rend(self)
    def pop_back(self): return _CppBlockUtils.vector_int_pop_back(self)
    def erase(self, *args): return _CppBlockUtils.vector_int_erase(self, *args)
    def __init__(self, *args): 
        this = _CppBlockUtils.new_vector_int(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _CppBlockUtils.vector_int_push_back(self, *args)
    def front(self): return _CppBlockUtils.vector_int_front(self)
    def back(self): return _CppBlockUtils.vector_int_back(self)
    def assign(self, *args): return _CppBlockUtils.vector_int_assign(self, *args)
    def resize(self, *args): return _CppBlockUtils.vector_int_resize(self, *args)
    def insert(self, *args): return _CppBlockUtils.vector_int_insert(self, *args)
    def reserve(self, *args): return _CppBlockUtils.vector_int_reserve(self, *args)
    def capacity(self): return _CppBlockUtils.vector_int_capacity(self)
    __swig_destroy__ = _CppBlockUtils.delete_vector_int
    __del__ = lambda self : None;
vector_int_swigregister = _CppBlockUtils.vector_int_swigregister
vector_int_swigregister(vector_int)

class vector_float:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_float, name)
    __repr__ = _swig_repr
    def iterator(self): return _CppBlockUtils.vector_float_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _CppBlockUtils.vector_float___nonzero__(self)
    def __bool__(self): return _CppBlockUtils.vector_float___bool__(self)
    def __len__(self): return _CppBlockUtils.vector_float___len__(self)
    def pop(self): return _CppBlockUtils.vector_float_pop(self)
    def __getslice__(self, *args): return _CppBlockUtils.vector_float___getslice__(self, *args)
    def __setslice__(self, *args): return _CppBlockUtils.vector_float___setslice__(self, *args)
    def __delslice__(self, *args): return _CppBlockUtils.vector_float___delslice__(self, *args)
    def __delitem__(self, *args): return _CppBlockUtils.vector_float___delitem__(self, *args)
    def __getitem__(self, *args): return _CppBlockUtils.vector_float___getitem__(self, *args)
    def __setitem__(self, *args): return _CppBlockUtils.vector_float___setitem__(self, *args)
    def append(self, *args): return _CppBlockUtils.vector_float_append(self, *args)
    def empty(self): return _CppBlockUtils.vector_float_empty(self)
    def size(self): return _CppBlockUtils.vector_float_size(self)
    def clear(self): return _CppBlockUtils.vector_float_clear(self)
    def swap(self, *args): return _CppBlockUtils.vector_float_swap(self, *args)
    def get_allocator(self): return _CppBlockUtils.vector_float_get_allocator(self)
    def begin(self): return _CppBlockUtils.vector_float_begin(self)
    def end(self): return _CppBlockUtils.vector_float_end(self)
    def rbegin(self): return _CppBlockUtils.vector_float_rbegin(self)
    def rend(self): return _CppBlockUtils.vector_float_rend(self)
    def pop_back(self): return _CppBlockUtils.vector_float_pop_back(self)
    def erase(self, *args): return _CppBlockUtils.vector_float_erase(self, *args)
    def __init__(self, *args): 
        this = _CppBlockUtils.new_vector_float(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _CppBlockUtils.vector_float_push_back(self, *args)
    def front(self): return _CppBlockUtils.vector_float_front(self)
    def back(self): return _CppBlockUtils.vector_float_back(self)
    def assign(self, *args): return _CppBlockUtils.vector_float_assign(self, *args)
    def resize(self, *args): return _CppBlockUtils.vector_float_resize(self, *args)
    def insert(self, *args): return _CppBlockUtils.vector_float_insert(self, *args)
    def reserve(self, *args): return _CppBlockUtils.vector_float_reserve(self, *args)
    def capacity(self): return _CppBlockUtils.vector_float_capacity(self)
    __swig_destroy__ = _CppBlockUtils.delete_vector_float
    __del__ = lambda self : None;
vector_float_swigregister = _CppBlockUtils.vector_float_swigregister
vector_float_swigregister(vector_float)

class vector_BinaryData:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_BinaryData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_BinaryData, name)
    __repr__ = _swig_repr
    def iterator(self): return _CppBlockUtils.vector_BinaryData_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _CppBlockUtils.vector_BinaryData___nonzero__(self)
    def __bool__(self): return _CppBlockUtils.vector_BinaryData___bool__(self)
    def __len__(self): return _CppBlockUtils.vector_BinaryData___len__(self)
    def pop(self): return _CppBlockUtils.vector_BinaryData_pop(self)
    def __getslice__(self, *args): return _CppBlockUtils.vector_BinaryData___getslice__(self, *args)
    def __setslice__(self, *args): return _CppBlockUtils.vector_BinaryData___setslice__(self, *args)
    def __delslice__(self, *args): return _CppBlockUtils.vector_BinaryData___delslice__(self, *args)
    def __delitem__(self, *args): return _CppBlockUtils.vector_BinaryData___delitem__(self, *args)
    def __getitem__(self, *args): return _CppBlockUtils.vector_BinaryData___getitem__(self, *args)
    def __setitem__(self, *args): return _CppBlockUtils.vector_BinaryData___setitem__(self, *args)
    def append(self, *args): return _CppBlockUtils.vector_BinaryData_append(self, *args)
    def empty(self): return _CppBlockUtils.vector_BinaryData_empty(self)
    def size(self): return _CppBlockUtils.vector_BinaryData_size(self)
    def clear(self): return _CppBlockUtils.vector_BinaryData_clear(self)
    def swap(self, *args): return _CppBlockUtils.vector_BinaryData_swap(self, *args)
    def get_allocator(self): return _CppBlockUtils.vector_BinaryData_get_allocator(self)
    def begin(self): return _CppBlockUtils.vector_BinaryData_begin(self)
    def end(self): return _CppBlockUtils.vector_BinaryData_end(self)
    def rbegin(self): return _CppBlockUtils.vector_BinaryData_rbegin(self)
    def rend(self): return _CppBlockUtils.vector_BinaryData_rend(self)
    def pop_back(self): return _CppBlockUtils.vector_BinaryData_pop_back(self)
    def erase(self, *args): return _CppBlockUtils.vector_BinaryData_erase(self, *args)
    def __init__(self, *args): 
        this = _CppBlockUtils.new_vector_BinaryData(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _CppBlockUtils.vector_BinaryData_push_back(self, *args)
    def front(self): return _CppBlockUtils.vector_BinaryData_front(self)
    def back(self): return _CppBlockUtils.vector_BinaryData_back(self)
    def assign(self, *args): return _CppBlockUtils.vector_BinaryData_assign(self, *args)
    def resize(self, *args): return _CppBlockUtils.vector_BinaryData_resize(self, *args)
    def insert(self, *args): return _CppBlockUtils.vector_BinaryData_insert(self, *args)
    def reserve(self, *args): return _CppBlockUtils.vector_BinaryData_reserve(self, *args)
    def capacity(self): return _CppBlockUtils.vector_BinaryData_capacity(self)
    __swig_destroy__ = _CppBlockUtils.delete_vector_BinaryData
    __del__ = lambda self : None;
vector_BinaryData_swigregister = _CppBlockUtils.vector_BinaryData_swigregister
vector_BinaryData_swigregister(vector_BinaryData)

class vector_LedgerEntry:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_LedgerEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_LedgerEntry, name)
    __repr__ = _swig_repr
    def iterator(self): return _CppBlockUtils.vector_LedgerEntry_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _CppBlockUtils.vector_LedgerEntry___nonzero__(self)
    def __bool__(self): return _CppBlockUtils.vector_LedgerEntry___bool__(self)
    def __len__(self): return _CppBlockUtils.vector_LedgerEntry___len__(self)
    def pop(self): return _CppBlockUtils.vector_LedgerEntry_pop(self)
    def __getslice__(self, *args): return _CppBlockUtils.vector_LedgerEntry___getslice__(self, *args)
    def __setslice__(self, *args): return _CppBlockUtils.vector_LedgerEntry___setslice__(self, *args)
    def __delslice__(self, *args): return _CppBlockUtils.vector_LedgerEntry___delslice__(self, *args)
    def __delitem__(self, *args): return _CppBlockUtils.vector_LedgerEntry___delitem__(self, *args)
    def __getitem__(self, *args): return _CppBlockUtils.vector_LedgerEntry___getitem__(self, *args)
    def __setitem__(self, *args): return _CppBlockUtils.vector_LedgerEntry___setitem__(self, *args)
    def append(self, *args): return _CppBlockUtils.vector_LedgerEntry_append(self, *args)
    def empty(self): return _CppBlockUtils.vector_LedgerEntry_empty(self)
    def size(self): return _CppBlockUtils.vector_LedgerEntry_size(self)
    def clear(self): return _CppBlockUtils.vector_LedgerEntry_clear(self)
    def swap(self, *args): return _CppBlockUtils.vector_LedgerEntry_swap(self, *args)
    def get_allocator(self): return _CppBlockUtils.vector_LedgerEntry_get_allocator(self)
    def begin(self): return _CppBlockUtils.vector_LedgerEntry_begin(self)
    def end(self): return _CppBlockUtils.vector_LedgerEntry_end(self)
    def rbegin(self): return _CppBlockUtils.vector_LedgerEntry_rbegin(self)
    def rend(self): return _CppBlockUtils.vector_LedgerEntry_rend(self)
    def pop_back(self): return _CppBlockUtils.vector_LedgerEntry_pop_back(self)
    def erase(self, *args): return _CppBlockUtils.vector_LedgerEntry_erase(self, *args)
    def __init__(self, *args): 
        this = _CppBlockUtils.new_vector_LedgerEntry(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _CppBlockUtils.vector_LedgerEntry_push_back(self, *args)
    def front(self): return _CppBlockUtils.vector_LedgerEntry_front(self)
    def back(self): return _CppBlockUtils.vector_LedgerEntry_back(self)
    def assign(self, *args): return _CppBlockUtils.vector_LedgerEntry_assign(self, *args)
    def resize(self, *args): return _CppBlockUtils.vector_LedgerEntry_resize(self, *args)
    def insert(self, *args): return _CppBlockUtils.vector_LedgerEntry_insert(self, *args)
    def reserve(self, *args): return _CppBlockUtils.vector_LedgerEntry_reserve(self, *args)
    def capacity(self): return _CppBlockUtils.vector_LedgerEntry_capacity(self)
    __swig_destroy__ = _CppBlockUtils.delete_vector_LedgerEntry
    __del__ = lambda self : None;
vector_LedgerEntry_swigregister = _CppBlockUtils.vector_LedgerEntry_swigregister
vector_LedgerEntry_swigregister(vector_LedgerEntry)

class vector_TxRefPtr:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_TxRefPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_TxRefPtr, name)
    __repr__ = _swig_repr
    def iterator(self): return _CppBlockUtils.vector_TxRefPtr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _CppBlockUtils.vector_TxRefPtr___nonzero__(self)
    def __bool__(self): return _CppBlockUtils.vector_TxRefPtr___bool__(self)
    def __len__(self): return _CppBlockUtils.vector_TxRefPtr___len__(self)
    def pop(self): return _CppBlockUtils.vector_TxRefPtr_pop(self)
    def __getslice__(self, *args): return _CppBlockUtils.vector_TxRefPtr___getslice__(self, *args)
    def __setslice__(self, *args): return _CppBlockUtils.vector_TxRefPtr___setslice__(self, *args)
    def __delslice__(self, *args): return _CppBlockUtils.vector_TxRefPtr___delslice__(self, *args)
    def __delitem__(self, *args): return _CppBlockUtils.vector_TxRefPtr___delitem__(self, *args)
    def __getitem__(self, *args): return _CppBlockUtils.vector_TxRefPtr___getitem__(self, *args)
    def __setitem__(self, *args): return _CppBlockUtils.vector_TxRefPtr___setitem__(self, *args)
    def append(self, *args): return _CppBlockUtils.vector_TxRefPtr_append(self, *args)
    def empty(self): return _CppBlockUtils.vector_TxRefPtr_empty(self)
    def size(self): return _CppBlockUtils.vector_TxRefPtr_size(self)
    def clear(self): return _CppBlockUtils.vector_TxRefPtr_clear(self)
    def swap(self, *args): return _CppBlockUtils.vector_TxRefPtr_swap(self, *args)
    def get_allocator(self): return _CppBlockUtils.vector_TxRefPtr_get_allocator(self)
    def begin(self): return _CppBlockUtils.vector_TxRefPtr_begin(self)
    def end(self): return _CppBlockUtils.vector_TxRefPtr_end(self)
    def rbegin(self): return _CppBlockUtils.vector_TxRefPtr_rbegin(self)
    def rend(self): return _CppBlockUtils.vector_TxRefPtr_rend(self)
    def pop_back(self): return _CppBlockUtils.vector_TxRefPtr_pop_back(self)
    def erase(self, *args): return _CppBlockUtils.vector_TxRefPtr_erase(self, *args)
    def __init__(self, *args): 
        this = _CppBlockUtils.new_vector_TxRefPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _CppBlockUtils.vector_TxRefPtr_push_back(self, *args)
    def front(self): return _CppBlockUtils.vector_TxRefPtr_front(self)
    def back(self): return _CppBlockUtils.vector_TxRefPtr_back(self)
    def assign(self, *args): return _CppBlockUtils.vector_TxRefPtr_assign(self, *args)
    def resize(self, *args): return _CppBlockUtils.vector_TxRefPtr_resize(self, *args)
    def insert(self, *args): return _CppBlockUtils.vector_TxRefPtr_insert(self, *args)
    def reserve(self, *args): return _CppBlockUtils.vector_TxRefPtr_reserve(self, *args)
    def capacity(self): return _CppBlockUtils.vector_TxRefPtr_capacity(self)
    __swig_destroy__ = _CppBlockUtils.delete_vector_TxRefPtr
    __del__ = lambda self : None;
vector_TxRefPtr_swigregister = _CppBlockUtils.vector_TxRefPtr_swigregister
vector_TxRefPtr_swigregister(vector_TxRefPtr)

class vector_Tx:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_Tx, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_Tx, name)
    __repr__ = _swig_repr
    def iterator(self): return _CppBlockUtils.vector_Tx_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _CppBlockUtils.vector_Tx___nonzero__(self)
    def __bool__(self): return _CppBlockUtils.vector_Tx___bool__(self)
    def __len__(self): return _CppBlockUtils.vector_Tx___len__(self)
    def pop(self): return _CppBlockUtils.vector_Tx_pop(self)
    def __getslice__(self, *args): return _CppBlockUtils.vector_Tx___getslice__(self, *args)
    def __setslice__(self, *args): return _CppBlockUtils.vector_Tx___setslice__(self, *args)
    def __delslice__(self, *args): return _CppBlockUtils.vector_Tx___delslice__(self, *args)
    def __delitem__(self, *args): return _CppBlockUtils.vector_Tx___delitem__(self, *args)
    def __getitem__(self, *args): return _CppBlockUtils.vector_Tx___getitem__(self, *args)
    def __setitem__(self, *args): return _CppBlockUtils.vector_Tx___setitem__(self, *args)
    def append(self, *args): return _CppBlockUtils.vector_Tx_append(self, *args)
    def empty(self): return _CppBlockUtils.vector_Tx_empty(self)
    def size(self): return _CppBlockUtils.vector_Tx_size(self)
    def clear(self): return _CppBlockUtils.vector_Tx_clear(self)
    def swap(self, *args): return _CppBlockUtils.vector_Tx_swap(self, *args)
    def get_allocator(self): return _CppBlockUtils.vector_Tx_get_allocator(self)
    def begin(self): return _CppBlockUtils.vector_Tx_begin(self)
    def end(self): return _CppBlockUtils.vector_Tx_end(self)
    def rbegin(self): return _CppBlockUtils.vector_Tx_rbegin(self)
    def rend(self): return _CppBlockUtils.vector_Tx_rend(self)
    def pop_back(self): return _CppBlockUtils.vector_Tx_pop_back(self)
    def erase(self, *args): return _CppBlockUtils.vector_Tx_erase(self, *args)
    def __init__(self, *args): 
        this = _CppBlockUtils.new_vector_Tx(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _CppBlockUtils.vector_Tx_push_back(self, *args)
    def front(self): return _CppBlockUtils.vector_Tx_front(self)
    def back(self): return _CppBlockUtils.vector_Tx_back(self)
    def assign(self, *args): return _CppBlockUtils.vector_Tx_assign(self, *args)
    def resize(self, *args): return _CppBlockUtils.vector_Tx_resize(self, *args)
    def insert(self, *args): return _CppBlockUtils.vector_Tx_insert(self, *args)
    def reserve(self, *args): return _CppBlockUtils.vector_Tx_reserve(self, *args)
    def capacity(self): return _CppBlockUtils.vector_Tx_capacity(self)
    __swig_destroy__ = _CppBlockUtils.delete_vector_Tx
    __del__ = lambda self : None;
vector_Tx_swigregister = _CppBlockUtils.vector_Tx_swigregister
vector_Tx_swigregister(vector_Tx)

class vector_BlockHeaderPtr:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_BlockHeaderPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_BlockHeaderPtr, name)
    __repr__ = _swig_repr
    def iterator(self): return _CppBlockUtils.vector_BlockHeaderPtr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _CppBlockUtils.vector_BlockHeaderPtr___nonzero__(self)
    def __bool__(self): return _CppBlockUtils.vector_BlockHeaderPtr___bool__(self)
    def __len__(self): return _CppBlockUtils.vector_BlockHeaderPtr___len__(self)
    def pop(self): return _CppBlockUtils.vector_BlockHeaderPtr_pop(self)
    def __getslice__(self, *args): return _CppBlockUtils.vector_BlockHeaderPtr___getslice__(self, *args)
    def __setslice__(self, *args): return _CppBlockUtils.vector_BlockHeaderPtr___setslice__(self, *args)
    def __delslice__(self, *args): return _CppBlockUtils.vector_BlockHeaderPtr___delslice__(self, *args)
    def __delitem__(self, *args): return _CppBlockUtils.vector_BlockHeaderPtr___delitem__(self, *args)
    def __getitem__(self, *args): return _CppBlockUtils.vector_BlockHeaderPtr___getitem__(self, *args)
    def __setitem__(self, *args): return _CppBlockUtils.vector_BlockHeaderPtr___setitem__(self, *args)
    def append(self, *args): return _CppBlockUtils.vector_BlockHeaderPtr_append(self, *args)
    def empty(self): return _CppBlockUtils.vector_BlockHeaderPtr_empty(self)
    def size(self): return _CppBlockUtils.vector_BlockHeaderPtr_size(self)
    def clear(self): return _CppBlockUtils.vector_BlockHeaderPtr_clear(self)
    def swap(self, *args): return _CppBlockUtils.vector_BlockHeaderPtr_swap(self, *args)
    def get_allocator(self): return _CppBlockUtils.vector_BlockHeaderPtr_get_allocator(self)
    def begin(self): return _CppBlockUtils.vector_BlockHeaderPtr_begin(self)
    def end(self): return _CppBlockUtils.vector_BlockHeaderPtr_end(self)
    def rbegin(self): return _CppBlockUtils.vector_BlockHeaderPtr_rbegin(self)
    def rend(self): return _CppBlockUtils.vector_BlockHeaderPtr_rend(self)
    def pop_back(self): return _CppBlockUtils.vector_BlockHeaderPtr_pop_back(self)
    def erase(self, *args): return _CppBlockUtils.vector_BlockHeaderPtr_erase(self, *args)
    def __init__(self, *args): 
        this = _CppBlockUtils.new_vector_BlockHeaderPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _CppBlockUtils.vector_BlockHeaderPtr_push_back(self, *args)
    def front(self): return _CppBlockUtils.vector_BlockHeaderPtr_front(self)
    def back(self): return _CppBlockUtils.vector_BlockHeaderPtr_back(self)
    def assign(self, *args): return _CppBlockUtils.vector_BlockHeaderPtr_assign(self, *args)
    def resize(self, *args): return _CppBlockUtils.vector_BlockHeaderPtr_resize(self, *args)
    def insert(self, *args): return _CppBlockUtils.vector_BlockHeaderPtr_insert(self, *args)
    def reserve(self, *args): return _CppBlockUtils.vector_BlockHeaderPtr_reserve(self, *args)
    def capacity(self): return _CppBlockUtils.vector_BlockHeaderPtr_capacity(self)
    __swig_destroy__ = _CppBlockUtils.delete_vector_BlockHeaderPtr
    __del__ = lambda self : None;
vector_BlockHeaderPtr_swigregister = _CppBlockUtils.vector_BlockHeaderPtr_swigregister
vector_BlockHeaderPtr_swigregister(vector_BlockHeaderPtr)

class vector_UnspentTxOut:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_UnspentTxOut, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_UnspentTxOut, name)
    __repr__ = _swig_repr
    def iterator(self): return _CppBlockUtils.vector_UnspentTxOut_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _CppBlockUtils.vector_UnspentTxOut___nonzero__(self)
    def __bool__(self): return _CppBlockUtils.vector_UnspentTxOut___bool__(self)
    def __len__(self): return _CppBlockUtils.vector_UnspentTxOut___len__(self)
    def pop(self): return _CppBlockUtils.vector_UnspentTxOut_pop(self)
    def __getslice__(self, *args): return _CppBlockUtils.vector_UnspentTxOut___getslice__(self, *args)
    def __setslice__(self, *args): return _CppBlockUtils.vector_UnspentTxOut___setslice__(self, *args)
    def __delslice__(self, *args): return _CppBlockUtils.vector_UnspentTxOut___delslice__(self, *args)
    def __delitem__(self, *args): return _CppBlockUtils.vector_UnspentTxOut___delitem__(self, *args)
    def __getitem__(self, *args): return _CppBlockUtils.vector_UnspentTxOut___getitem__(self, *args)
    def __setitem__(self, *args): return _CppBlockUtils.vector_UnspentTxOut___setitem__(self, *args)
    def append(self, *args): return _CppBlockUtils.vector_UnspentTxOut_append(self, *args)
    def empty(self): return _CppBlockUtils.vector_UnspentTxOut_empty(self)
    def size(self): return _CppBlockUtils.vector_UnspentTxOut_size(self)
    def clear(self): return _CppBlockUtils.vector_UnspentTxOut_clear(self)
    def swap(self, *args): return _CppBlockUtils.vector_UnspentTxOut_swap(self, *args)
    def get_allocator(self): return _CppBlockUtils.vector_UnspentTxOut_get_allocator(self)
    def begin(self): return _CppBlockUtils.vector_UnspentTxOut_begin(self)
    def end(self): return _CppBlockUtils.vector_UnspentTxOut_end(self)
    def rbegin(self): return _CppBlockUtils.vector_UnspentTxOut_rbegin(self)
    def rend(self): return _CppBlockUtils.vector_UnspentTxOut_rend(self)
    def pop_back(self): return _CppBlockUtils.vector_UnspentTxOut_pop_back(self)
    def erase(self, *args): return _CppBlockUtils.vector_UnspentTxOut_erase(self, *args)
    def __init__(self, *args): 
        this = _CppBlockUtils.new_vector_UnspentTxOut(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _CppBlockUtils.vector_UnspentTxOut_push_back(self, *args)
    def front(self): return _CppBlockUtils.vector_UnspentTxOut_front(self)
    def back(self): return _CppBlockUtils.vector_UnspentTxOut_back(self)
    def assign(self, *args): return _CppBlockUtils.vector_UnspentTxOut_assign(self, *args)
    def resize(self, *args): return _CppBlockUtils.vector_UnspentTxOut_resize(self, *args)
    def insert(self, *args): return _CppBlockUtils.vector_UnspentTxOut_insert(self, *args)
    def reserve(self, *args): return _CppBlockUtils.vector_UnspentTxOut_reserve(self, *args)
    def capacity(self): return _CppBlockUtils.vector_UnspentTxOut_capacity(self)
    __swig_destroy__ = _CppBlockUtils.delete_vector_UnspentTxOut
    __del__ = lambda self : None;
vector_UnspentTxOut_swigregister = _CppBlockUtils.vector_UnspentTxOut_swigregister
vector_UnspentTxOut_swigregister(vector_UnspentTxOut)

class vector_BtcWallet:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_BtcWallet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_BtcWallet, name)
    __repr__ = _swig_repr
    def iterator(self): return _CppBlockUtils.vector_BtcWallet_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _CppBlockUtils.vector_BtcWallet___nonzero__(self)
    def __bool__(self): return _CppBlockUtils.vector_BtcWallet___bool__(self)
    def __len__(self): return _CppBlockUtils.vector_BtcWallet___len__(self)
    def pop(self): return _CppBlockUtils.vector_BtcWallet_pop(self)
    def __getslice__(self, *args): return _CppBlockUtils.vector_BtcWallet___getslice__(self, *args)
    def __setslice__(self, *args): return _CppBlockUtils.vector_BtcWallet___setslice__(self, *args)
    def __delslice__(self, *args): return _CppBlockUtils.vector_BtcWallet___delslice__(self, *args)
    def __delitem__(self, *args): return _CppBlockUtils.vector_BtcWallet___delitem__(self, *args)
    def __getitem__(self, *args): return _CppBlockUtils.vector_BtcWallet___getitem__(self, *args)
    def __setitem__(self, *args): return _CppBlockUtils.vector_BtcWallet___setitem__(self, *args)
    def append(self, *args): return _CppBlockUtils.vector_BtcWallet_append(self, *args)
    def empty(self): return _CppBlockUtils.vector_BtcWallet_empty(self)
    def size(self): return _CppBlockUtils.vector_BtcWallet_size(self)
    def clear(self): return _CppBlockUtils.vector_BtcWallet_clear(self)
    def swap(self, *args): return _CppBlockUtils.vector_BtcWallet_swap(self, *args)
    def get_allocator(self): return _CppBlockUtils.vector_BtcWallet_get_allocator(self)
    def begin(self): return _CppBlockUtils.vector_BtcWallet_begin(self)
    def end(self): return _CppBlockUtils.vector_BtcWallet_end(self)
    def rbegin(self): return _CppBlockUtils.vector_BtcWallet_rbegin(self)
    def rend(self): return _CppBlockUtils.vector_BtcWallet_rend(self)
    def pop_back(self): return _CppBlockUtils.vector_BtcWallet_pop_back(self)
    def erase(self, *args): return _CppBlockUtils.vector_BtcWallet_erase(self, *args)
    def __init__(self, *args): 
        this = _CppBlockUtils.new_vector_BtcWallet(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _CppBlockUtils.vector_BtcWallet_push_back(self, *args)
    def front(self): return _CppBlockUtils.vector_BtcWallet_front(self)
    def back(self): return _CppBlockUtils.vector_BtcWallet_back(self)
    def assign(self, *args): return _CppBlockUtils.vector_BtcWallet_assign(self, *args)
    def resize(self, *args): return _CppBlockUtils.vector_BtcWallet_resize(self, *args)
    def insert(self, *args): return _CppBlockUtils.vector_BtcWallet_insert(self, *args)
    def reserve(self, *args): return _CppBlockUtils.vector_BtcWallet_reserve(self, *args)
    def capacity(self): return _CppBlockUtils.vector_BtcWallet_capacity(self)
    __swig_destroy__ = _CppBlockUtils.delete_vector_BtcWallet
    __del__ = lambda self : None;
vector_BtcWallet_swigregister = _CppBlockUtils.vector_BtcWallet_swigregister
vector_BtcWallet_swigregister(vector_BtcWallet)

class vector_AddressBookEntry:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_AddressBookEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_AddressBookEntry, name)
    __repr__ = _swig_repr
    def iterator(self): return _CppBlockUtils.vector_AddressBookEntry_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _CppBlockUtils.vector_AddressBookEntry___nonzero__(self)
    def __bool__(self): return _CppBlockUtils.vector_AddressBookEntry___bool__(self)
    def __len__(self): return _CppBlockUtils.vector_AddressBookEntry___len__(self)
    def pop(self): return _CppBlockUtils.vector_AddressBookEntry_pop(self)
    def __getslice__(self, *args): return _CppBlockUtils.vector_AddressBookEntry___getslice__(self, *args)
    def __setslice__(self, *args): return _CppBlockUtils.vector_AddressBookEntry___setslice__(self, *args)
    def __delslice__(self, *args): return _CppBlockUtils.vector_AddressBookEntry___delslice__(self, *args)
    def __delitem__(self, *args): return _CppBlockUtils.vector_AddressBookEntry___delitem__(self, *args)
    def __getitem__(self, *args): return _CppBlockUtils.vector_AddressBookEntry___getitem__(self, *args)
    def __setitem__(self, *args): return _CppBlockUtils.vector_AddressBookEntry___setitem__(self, *args)
    def append(self, *args): return _CppBlockUtils.vector_AddressBookEntry_append(self, *args)
    def empty(self): return _CppBlockUtils.vector_AddressBookEntry_empty(self)
    def size(self): return _CppBlockUtils.vector_AddressBookEntry_size(self)
    def clear(self): return _CppBlockUtils.vector_AddressBookEntry_clear(self)
    def swap(self, *args): return _CppBlockUtils.vector_AddressBookEntry_swap(self, *args)
    def get_allocator(self): return _CppBlockUtils.vector_AddressBookEntry_get_allocator(self)
    def begin(self): return _CppBlockUtils.vector_AddressBookEntry_begin(self)
    def end(self): return _CppBlockUtils.vector_AddressBookEntry_end(self)
    def rbegin(self): return _CppBlockUtils.vector_AddressBookEntry_rbegin(self)
    def rend(self): return _CppBlockUtils.vector_AddressBookEntry_rend(self)
    def pop_back(self): return _CppBlockUtils.vector_AddressBookEntry_pop_back(self)
    def erase(self, *args): return _CppBlockUtils.vector_AddressBookEntry_erase(self, *args)
    def __init__(self, *args): 
        this = _CppBlockUtils.new_vector_AddressBookEntry(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _CppBlockUtils.vector_AddressBookEntry_push_back(self, *args)
    def front(self): return _CppBlockUtils.vector_AddressBookEntry_front(self)
    def back(self): return _CppBlockUtils.vector_AddressBookEntry_back(self)
    def assign(self, *args): return _CppBlockUtils.vector_AddressBookEntry_assign(self, *args)
    def resize(self, *args): return _CppBlockUtils.vector_AddressBookEntry_resize(self, *args)
    def insert(self, *args): return _CppBlockUtils.vector_AddressBookEntry_insert(self, *args)
    def reserve(self, *args): return _CppBlockUtils.vector_AddressBookEntry_reserve(self, *args)
    def capacity(self): return _CppBlockUtils.vector_AddressBookEntry_capacity(self)
    __swig_destroy__ = _CppBlockUtils.delete_vector_AddressBookEntry
    __del__ = lambda self : None;
vector_AddressBookEntry_swigregister = _CppBlockUtils.vector_AddressBookEntry_swigregister
vector_AddressBookEntry_swigregister(vector_AddressBookEntry)

class vector_RegisteredTx:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_RegisteredTx, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_RegisteredTx, name)
    __repr__ = _swig_repr
    def iterator(self): return _CppBlockUtils.vector_RegisteredTx_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _CppBlockUtils.vector_RegisteredTx___nonzero__(self)
    def __bool__(self): return _CppBlockUtils.vector_RegisteredTx___bool__(self)
    def __len__(self): return _CppBlockUtils.vector_RegisteredTx___len__(self)
    def pop(self): return _CppBlockUtils.vector_RegisteredTx_pop(self)
    def __getslice__(self, *args): return _CppBlockUtils.vector_RegisteredTx___getslice__(self, *args)
    def __setslice__(self, *args): return _CppBlockUtils.vector_RegisteredTx___setslice__(self, *args)
    def __delslice__(self, *args): return _CppBlockUtils.vector_RegisteredTx___delslice__(self, *args)
    def __delitem__(self, *args): return _CppBlockUtils.vector_RegisteredTx___delitem__(self, *args)
    def __getitem__(self, *args): return _CppBlockUtils.vector_RegisteredTx___getitem__(self, *args)
    def __setitem__(self, *args): return _CppBlockUtils.vector_RegisteredTx___setitem__(self, *args)
    def append(self, *args): return _CppBlockUtils.vector_RegisteredTx_append(self, *args)
    def empty(self): return _CppBlockUtils.vector_RegisteredTx_empty(self)
    def size(self): return _CppBlockUtils.vector_RegisteredTx_size(self)
    def clear(self): return _CppBlockUtils.vector_RegisteredTx_clear(self)
    def swap(self, *args): return _CppBlockUtils.vector_RegisteredTx_swap(self, *args)
    def get_allocator(self): return _CppBlockUtils.vector_RegisteredTx_get_allocator(self)
    def begin(self): return _CppBlockUtils.vector_RegisteredTx_begin(self)
    def end(self): return _CppBlockUtils.vector_RegisteredTx_end(self)
    def rbegin(self): return _CppBlockUtils.vector_RegisteredTx_rbegin(self)
    def rend(self): return _CppBlockUtils.vector_RegisteredTx_rend(self)
    def pop_back(self): return _CppBlockUtils.vector_RegisteredTx_pop_back(self)
    def erase(self, *args): return _CppBlockUtils.vector_RegisteredTx_erase(self, *args)
    def __init__(self, *args): 
        this = _CppBlockUtils.new_vector_RegisteredTx(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _CppBlockUtils.vector_RegisteredTx_push_back(self, *args)
    def front(self): return _CppBlockUtils.vector_RegisteredTx_front(self)
    def back(self): return _CppBlockUtils.vector_RegisteredTx_back(self)
    def assign(self, *args): return _CppBlockUtils.vector_RegisteredTx_assign(self, *args)
    def resize(self, *args): return _CppBlockUtils.vector_RegisteredTx_resize(self, *args)
    def insert(self, *args): return _CppBlockUtils.vector_RegisteredTx_insert(self, *args)
    def reserve(self, *args): return _CppBlockUtils.vector_RegisteredTx_reserve(self, *args)
    def capacity(self): return _CppBlockUtils.vector_RegisteredTx_capacity(self)
    __swig_destroy__ = _CppBlockUtils.delete_vector_RegisteredTx
    __del__ = lambda self : None;
vector_RegisteredTx_swigregister = _CppBlockUtils.vector_RegisteredTx_swigregister
vector_RegisteredTx_swigregister(vector_RegisteredTx)

class BlockHeader:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlockHeader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CppBlockUtils.new_BlockHeader(*args)
        try: self.this.append(this)
        except: self.this = this
    def unserialize_1_(self, *args): return _CppBlockUtils.BlockHeader_unserialize_1_(self, *args)
    def getVersion(self): return _CppBlockUtils.BlockHeader_getVersion(self)
    def getThisHash(self): return _CppBlockUtils.BlockHeader_getThisHash(self)
    def getPrevHash(self): return _CppBlockUtils.BlockHeader_getPrevHash(self)
    def getNextHash(self): return _CppBlockUtils.BlockHeader_getNextHash(self)
    def getMerkleRoot(self): return _CppBlockUtils.BlockHeader_getMerkleRoot(self)
    def getDiffBits(self): return _CppBlockUtils.BlockHeader_getDiffBits(self)
    def getTimestamp(self): return _CppBlockUtils.BlockHeader_getTimestamp(self)
    def getNonce(self): return _CppBlockUtils.BlockHeader_getNonce(self)
    def getBlockHeight(self): return _CppBlockUtils.BlockHeader_getBlockHeight(self)
    def isMainBranch(self): return _CppBlockUtils.BlockHeader_isMainBranch(self)
    def isOrphan(self): return _CppBlockUtils.BlockHeader_isOrphan(self)
    def getDifficulty(self): return _CppBlockUtils.BlockHeader_getDifficulty(self)
    def getDifficultySum(self): return _CppBlockUtils.BlockHeader_getDifficultySum(self)
    def getThisHashRef(self): return _CppBlockUtils.BlockHeader_getThisHashRef(self)
    def getPrevHashRef(self): return _CppBlockUtils.BlockHeader_getPrevHashRef(self)
    def getNextHashRef(self): return _CppBlockUtils.BlockHeader_getNextHashRef(self)
    def getMerkleRootRef(self): return _CppBlockUtils.BlockHeader_getMerkleRootRef(self)
    def getDiffBitsRef(self): return _CppBlockUtils.BlockHeader_getDiffBitsRef(self)
    def getNumTx(self): return _CppBlockUtils.BlockHeader_getNumTx(self)
    def getPtr(self): return _CppBlockUtils.BlockHeader_getPtr(self)
    def getSize(self): return _CppBlockUtils.BlockHeader_getSize(self)
    def isInitialized(self): return _CppBlockUtils.BlockHeader_isInitialized(self)
    def getBlockSize(self): return _CppBlockUtils.BlockHeader_getBlockSize(self)
    def getBlockFilePtr(self): return _CppBlockUtils.BlockHeader_getBlockFilePtr(self)
    def setBlockFilePtr(self, *args): return _CppBlockUtils.BlockHeader_setBlockFilePtr(self, *args)
    def getTxRefPtrList(self): return _CppBlockUtils.BlockHeader_getTxRefPtrList(self)
    def getTxHashList(self): return _CppBlockUtils.BlockHeader_getTxHashList(self)
    def calcMerkleRoot(self, treeOut = None): return _CppBlockUtils.BlockHeader_calcMerkleRoot(self, treeOut)
    def verifyMerkleRoot(self): return _CppBlockUtils.BlockHeader_verifyMerkleRoot(self)
    def verifyIntegrity(self): return _CppBlockUtils.BlockHeader_verifyIntegrity(self)
    def pprint(self, *args): return _CppBlockUtils.BlockHeader_pprint(self, *args)
    def pprintAlot(self, *args): return _CppBlockUtils.BlockHeader_pprintAlot(self, *args)
    def serialize(self): return _CppBlockUtils.BlockHeader_serialize(self)
    def serializeWholeBlock(self, *args): return _CppBlockUtils.BlockHeader_serializeWholeBlock(self, *args)
    def findNonce(self): return _CppBlockUtils.BlockHeader_findNonce(self)
    def unserialize(self, *args): return _CppBlockUtils.BlockHeader_unserialize(self, *args)
    def unserialize_swigsafe_(self, *args): return _CppBlockUtils.BlockHeader_unserialize_swigsafe_(self, *args)
    def clearDataCopy(self): return _CppBlockUtils.BlockHeader_clearDataCopy(self)
    __swig_destroy__ = _CppBlockUtils.delete_BlockHeader
    __del__ = lambda self : None;
BlockHeader_swigregister = _CppBlockUtils.BlockHeader_swigregister
BlockHeader_swigregister(BlockHeader)

class OutPoint:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutPoint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CppBlockUtils.new_OutPoint(*args)
        try: self.this.append(this)
        except: self.this = this
    def getTxHash(self): return _CppBlockUtils.OutPoint_getTxHash(self)
    def getTxHashRef(self): return _CppBlockUtils.OutPoint_getTxHashRef(self)
    def getTxOutIndex(self): return _CppBlockUtils.OutPoint_getTxOutIndex(self)
    def setTxHash(self, *args): return _CppBlockUtils.OutPoint_setTxHash(self, *args)
    def setTxOutIndex(self, *args): return _CppBlockUtils.OutPoint_setTxOutIndex(self, *args)
    def __lt__(self, *args): return _CppBlockUtils.OutPoint___lt__(self, *args)
    def __eq__(self, *args): return _CppBlockUtils.OutPoint___eq__(self, *args)
    def serialize(self, *args): return _CppBlockUtils.OutPoint_serialize(self, *args)
    def unserialize(self, *args): return _CppBlockUtils.OutPoint_unserialize(self, *args)
    def unserialize_swigsafe_(self, *args): return _CppBlockUtils.OutPoint_unserialize_swigsafe_(self, *args)
    __swig_destroy__ = _CppBlockUtils.delete_OutPoint
    __del__ = lambda self : None;
OutPoint_swigregister = _CppBlockUtils.OutPoint_swigregister
OutPoint_swigregister(OutPoint)

class TxIn:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TxIn, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TxIn, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CppBlockUtils.new_TxIn(*args)
        try: self.this.append(this)
        except: self.this = this
    def getPtr(self): return _CppBlockUtils.TxIn_getPtr(self)
    def getSize(self): return _CppBlockUtils.TxIn_getSize(self)
    def isStandard(self): return _CppBlockUtils.TxIn_isStandard(self)
    def isCoinbase(self): return _CppBlockUtils.TxIn_isCoinbase(self)
    def isInitialized(self): return _CppBlockUtils.TxIn_isInitialized(self)
    def getOutPoint(self): return _CppBlockUtils.TxIn_getOutPoint(self)
    def getScript(self): return _CppBlockUtils.TxIn_getScript(self)
    def getScriptRef(self): return _CppBlockUtils.TxIn_getScriptRef(self)
    def getScriptSize(self): return _CppBlockUtils.TxIn_getScriptSize(self)
    def getScriptType(self): return _CppBlockUtils.TxIn_getScriptType(self)
    def getScriptOffset(self): return _CppBlockUtils.TxIn_getScriptOffset(self)
    def isScriptStandard(self): return _CppBlockUtils.TxIn_isScriptStandard(self)
    def isScriptCoinbase(self): return _CppBlockUtils.TxIn_isScriptCoinbase(self)
    def isScriptSpendCB(self): return _CppBlockUtils.TxIn_isScriptSpendCB(self)
    def isScriptUnknown(self): return _CppBlockUtils.TxIn_isScriptUnknown(self)
    def getParentTxPtr(self): return _CppBlockUtils.TxIn_getParentTxPtr(self)
    def getIndex(self): return _CppBlockUtils.TxIn_getIndex(self)
    def setParentTx(self, *args): return _CppBlockUtils.TxIn_setParentTx(self, *args)
    def getSequence(self): return _CppBlockUtils.TxIn_getSequence(self)
    def getParentHash(self): return _CppBlockUtils.TxIn_getParentHash(self)
    def getParentHeight(self): return _CppBlockUtils.TxIn_getParentHeight(self)
    def setParentHash(self, *args): return _CppBlockUtils.TxIn_setParentHash(self, *args)
    def setParentHeight(self, *args): return _CppBlockUtils.TxIn_setParentHeight(self, *args)
    def serialize(self): return _CppBlockUtils.TxIn_serialize(self)
    def unserialize(self, *args): return _CppBlockUtils.TxIn_unserialize(self, *args)
    def unserialize_swigsafe_(self, *args): return _CppBlockUtils.TxIn_unserialize_swigsafe_(self, *args)
    def getSenderAddrIfAvailable(self, *args): return _CppBlockUtils.TxIn_getSenderAddrIfAvailable(self, *args)
    def pprint(self, *args): return _CppBlockUtils.TxIn_pprint(self, *args)
    __swig_destroy__ = _CppBlockUtils.delete_TxIn
    __del__ = lambda self : None;
TxIn_swigregister = _CppBlockUtils.TxIn_swigregister
TxIn_swigregister(TxIn)

class TxOut:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TxOut, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TxOut, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CppBlockUtils.new_TxOut(*args)
        try: self.this.append(this)
        except: self.this = this
    def getPtr(self): return _CppBlockUtils.TxOut_getPtr(self)
    def getSize(self): return _CppBlockUtils.TxOut_getSize(self)
    def getValue(self): return _CppBlockUtils.TxOut_getValue(self)
    def isStandard(self): return _CppBlockUtils.TxOut_isStandard(self)
    def isInitialized(self): return _CppBlockUtils.TxOut_isInitialized(self)
    def getParentTxPtr(self): return _CppBlockUtils.TxOut_getParentTxPtr(self)
    def getIndex(self): return _CppBlockUtils.TxOut_getIndex(self)
    def setParentTx(self, *args): return _CppBlockUtils.TxOut_setParentTx(self, *args)
    def getRecipientAddr(self): return _CppBlockUtils.TxOut_getRecipientAddr(self)
    def getRecipientAddrRef(self): return _CppBlockUtils.TxOut_getRecipientAddrRef(self)
    def getScript(self): return _CppBlockUtils.TxOut_getScript(self)
    def getScriptRef(self): return _CppBlockUtils.TxOut_getScriptRef(self)
    def getScriptType(self): return _CppBlockUtils.TxOut_getScriptType(self)
    def getScriptSize(self): return _CppBlockUtils.TxOut_getScriptSize(self)
    def isScriptStandard(self): return _CppBlockUtils.TxOut_isScriptStandard(self)
    def isScriptCoinbase(self): return _CppBlockUtils.TxOut_isScriptCoinbase(self)
    def isScriptUnknown(self): return _CppBlockUtils.TxOut_isScriptUnknown(self)
    def serialize(self): return _CppBlockUtils.TxOut_serialize(self)
    def serializeRef(self): return _CppBlockUtils.TxOut_serializeRef(self)
    def getParentHash(self): return _CppBlockUtils.TxOut_getParentHash(self)
    def getParentHeight(self): return _CppBlockUtils.TxOut_getParentHeight(self)
    def setParentHash(self, *args): return _CppBlockUtils.TxOut_setParentHash(self, *args)
    def setParentHeight(self, *args): return _CppBlockUtils.TxOut_setParentHeight(self, *args)
    def unserialize(self, *args): return _CppBlockUtils.TxOut_unserialize(self, *args)
    def unserialize_swigsafe_(self, *args): return _CppBlockUtils.TxOut_unserialize_swigsafe_(self, *args)
    def pprint(self, *args): return _CppBlockUtils.TxOut_pprint(self, *args)
    __swig_destroy__ = _CppBlockUtils.delete_TxOut
    __del__ = lambda self : None;
TxOut_swigregister = _CppBlockUtils.TxOut_swigregister
TxOut_swigregister(TxOut)

class Tx:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tx, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tx, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CppBlockUtils.new_Tx(*args)
        try: self.this.append(this)
        except: self.this = this
    def getPtr(self): return _CppBlockUtils.Tx_getPtr(self)
    def getSize(self): return _CppBlockUtils.Tx_getSize(self)
    def getVersion(self): return _CppBlockUtils.Tx_getVersion(self)
    def getNumTxIn(self): return _CppBlockUtils.Tx_getNumTxIn(self)
    def getNumTxOut(self): return _CppBlockUtils.Tx_getNumTxOut(self)
    def getThisHash(self): return _CppBlockUtils.Tx_getThisHash(self)
    def isMainBranch(self): return _CppBlockUtils.Tx_isMainBranch(self)
    def isInitialized(self): return _CppBlockUtils.Tx_isInitialized(self)
    def getTxInOffset(self, *args): return _CppBlockUtils.Tx_getTxInOffset(self, *args)
    def getTxOutOffset(self, *args): return _CppBlockUtils.Tx_getTxOutOffset(self, *args)
    __swig_getmethods__["createFromStr"] = lambda x: _CppBlockUtils.Tx_createFromStr
    def getTxRefPtr(self): return _CppBlockUtils.Tx_getTxRefPtr(self)
    def setTxRefPtr(self, *args): return _CppBlockUtils.Tx_setTxRefPtr(self, *args)
    def getHeaderPtr(self): return _CppBlockUtils.Tx_getHeaderPtr(self)
    def setHeaderPtr(self, *args): return _CppBlockUtils.Tx_setHeaderPtr(self, *args)
    def isTethered(self): return _CppBlockUtils.Tx_isTethered(self)
    def serialize(self): return _CppBlockUtils.Tx_serialize(self)
    def unserialize(self, *args): return _CppBlockUtils.Tx_unserialize(self, *args)
    def unserialize_swigsafe_(self, *args): return _CppBlockUtils.Tx_unserialize_swigsafe_(self, *args)
    def getLockTime(self): return _CppBlockUtils.Tx_getLockTime(self)
    def getSumOfOutputs(self): return _CppBlockUtils.Tx_getSumOfOutputs(self)
    def getRecipientForTxOut(self, *args): return _CppBlockUtils.Tx_getRecipientForTxOut(self, *args)
    def getTxIn(self, *args): return _CppBlockUtils.Tx_getTxIn(self, *args)
    def getTxOut(self, *args): return _CppBlockUtils.Tx_getTxOut(self, *args)
    def getBlockTimestamp(self): return _CppBlockUtils.Tx_getBlockTimestamp(self)
    def getBlockHeight(self): return _CppBlockUtils.Tx_getBlockHeight(self)
    def getBlockTxIndex(self): return _CppBlockUtils.Tx_getBlockTxIndex(self)
    def pprint(self, *args): return _CppBlockUtils.Tx_pprint(self, *args)
    def pprintAlot(self, *args): return _CppBlockUtils.Tx_pprintAlot(self, *args)
    __swig_destroy__ = _CppBlockUtils.delete_Tx
    __del__ = lambda self : None;
Tx_swigregister = _CppBlockUtils.Tx_swigregister
Tx_swigregister(Tx)

def Tx_createFromStr(*args):
  return _CppBlockUtils.Tx_createFromStr(*args)
Tx_createFromStr = _CppBlockUtils.Tx_createFromStr

class TxRef:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TxRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TxRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CppBlockUtils.new_TxRef(*args)
        try: self.this.append(this)
        except: self.this = this
    def getThisHash(self): return _CppBlockUtils.TxRef_getThisHash(self)
    def getTxCopy(self): return _CppBlockUtils.TxRef_getTxCopy(self)
    def isMainBranch(self): return _CppBlockUtils.TxRef_isMainBranch(self)
    def getSize(self): return _CppBlockUtils.TxRef_getSize(self)
    def getHeaderPtr(self): return _CppBlockUtils.TxRef_getHeaderPtr(self)
    def setHeaderPtr(self, *args): return _CppBlockUtils.TxRef_setHeaderPtr(self, *args)
    def getBlkFilePtr(self): return _CppBlockUtils.TxRef_getBlkFilePtr(self)
    def setBlkFilePtr(self, *args): return _CppBlockUtils.TxRef_setBlkFilePtr(self, *args)
    def serialize(self): return _CppBlockUtils.TxRef_serialize(self)
    def getBlockTimestamp(self): return _CppBlockUtils.TxRef_getBlockTimestamp(self)
    def getBlockHeight(self): return _CppBlockUtils.TxRef_getBlockHeight(self)
    def getBlockTxIndex(self): return _CppBlockUtils.TxRef_getBlockTxIndex(self)
    def pprint(self, *args): return _CppBlockUtils.TxRef_pprint(self, *args)
    __swig_destroy__ = _CppBlockUtils.delete_TxRef
    __del__ = lambda self : None;
TxRef_swigregister = _CppBlockUtils.TxRef_swigregister
TxRef_swigregister(TxRef)

class UnspentTxOut:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnspentTxOut, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnspentTxOut, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CppBlockUtils.new_UnspentTxOut(*args)
        try: self.this.append(this)
        except: self.this = this
    def init(self, *args): return _CppBlockUtils.UnspentTxOut_init(self, *args)
    def getTxHash(self): return _CppBlockUtils.UnspentTxOut_getTxHash(self)
    def getTxOutIndex(self): return _CppBlockUtils.UnspentTxOut_getTxOutIndex(self)
    def getValue(self): return _CppBlockUtils.UnspentTxOut_getValue(self)
    def getTxHeight(self): return _CppBlockUtils.UnspentTxOut_getTxHeight(self)
    def getNumConfirm(self): return _CppBlockUtils.UnspentTxOut_getNumConfirm(self)
    def getOutPoint(self): return _CppBlockUtils.UnspentTxOut_getOutPoint(self)
    def getScript(self): return _CppBlockUtils.UnspentTxOut_getScript(self)
    def getRecipientAddr(self): return _CppBlockUtils.UnspentTxOut_getRecipientAddr(self)
    def updateNumConfirm(self, *args): return _CppBlockUtils.UnspentTxOut_updateNumConfirm(self, *args)
    def pprintOneLine(self, *args): return _CppBlockUtils.UnspentTxOut_pprintOneLine(self, *args)
    __swig_getmethods__["CompareNaive"] = lambda x: _CppBlockUtils.UnspentTxOut_CompareNaive
    __swig_getmethods__["CompareTech1"] = lambda x: _CppBlockUtils.UnspentTxOut_CompareTech1
    __swig_getmethods__["CompareTech2"] = lambda x: _CppBlockUtils.UnspentTxOut_CompareTech2
    __swig_getmethods__["CompareTech3"] = lambda x: _CppBlockUtils.UnspentTxOut_CompareTech3
    __swig_getmethods__["sortTxOutVect"] = lambda x: _CppBlockUtils.UnspentTxOut_sortTxOutVect
    __swig_setmethods__["txHash_"] = _CppBlockUtils.UnspentTxOut_txHash__set
    __swig_getmethods__["txHash_"] = _CppBlockUtils.UnspentTxOut_txHash__get
    __swig_setmethods__["txOutIndex_"] = _CppBlockUtils.UnspentTxOut_txOutIndex__set
    __swig_getmethods__["txOutIndex_"] = _CppBlockUtils.UnspentTxOut_txOutIndex__get
    __swig_setmethods__["txHeight_"] = _CppBlockUtils.UnspentTxOut_txHeight__set
    __swig_getmethods__["txHeight_"] = _CppBlockUtils.UnspentTxOut_txHeight__get
    __swig_setmethods__["value_"] = _CppBlockUtils.UnspentTxOut_value__set
    __swig_getmethods__["value_"] = _CppBlockUtils.UnspentTxOut_value__get
    __swig_setmethods__["script_"] = _CppBlockUtils.UnspentTxOut_script__set
    __swig_getmethods__["script_"] = _CppBlockUtils.UnspentTxOut_script__get
    __swig_setmethods__["numConfirm_"] = _CppBlockUtils.UnspentTxOut_numConfirm__set
    __swig_getmethods__["numConfirm_"] = _CppBlockUtils.UnspentTxOut_numConfirm__get
    __swig_setmethods__["targetTxAmount_"] = _CppBlockUtils.UnspentTxOut_targetTxAmount__set
    __swig_getmethods__["targetTxAmount_"] = _CppBlockUtils.UnspentTxOut_targetTxAmount__get
    __swig_destroy__ = _CppBlockUtils.delete_UnspentTxOut
    __del__ = lambda self : None;
UnspentTxOut_swigregister = _CppBlockUtils.UnspentTxOut_swigregister
UnspentTxOut_swigregister(UnspentTxOut)

def UnspentTxOut_CompareNaive(*args):
  return _CppBlockUtils.UnspentTxOut_CompareNaive(*args)
UnspentTxOut_CompareNaive = _CppBlockUtils.UnspentTxOut_CompareNaive

def UnspentTxOut_CompareTech1(*args):
  return _CppBlockUtils.UnspentTxOut_CompareTech1(*args)
UnspentTxOut_CompareTech1 = _CppBlockUtils.UnspentTxOut_CompareTech1

def UnspentTxOut_CompareTech2(*args):
  return _CppBlockUtils.UnspentTxOut_CompareTech2(*args)
UnspentTxOut_CompareTech2 = _CppBlockUtils.UnspentTxOut_CompareTech2

def UnspentTxOut_CompareTech3(*args):
  return _CppBlockUtils.UnspentTxOut_CompareTech3(*args)
UnspentTxOut_CompareTech3 = _CppBlockUtils.UnspentTxOut_CompareTech3

def UnspentTxOut_sortTxOutVect(*args):
  return _CppBlockUtils.UnspentTxOut_sortTxOutVect(*args)
UnspentTxOut_sortTxOutVect = _CppBlockUtils.UnspentTxOut_sortTxOutVect

TX_0_UNCONFIRMED = _CppBlockUtils.TX_0_UNCONFIRMED
TX_NOT_EXIST = _CppBlockUtils.TX_NOT_EXIST
TX_OFF_MAIN_BRANCH = _CppBlockUtils.TX_OFF_MAIN_BRANCH
NBLOCKS_REGARDED_AS_RESCAN = _CppBlockUtils.NBLOCKS_REGARDED_AS_RESCAN
MIN_CONFIRMATIONS = _CppBlockUtils.MIN_CONFIRMATIONS
COINBASE_MATURITY = _CppBlockUtils.COINBASE_MATURITY
class TxIOPair:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TxIOPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TxIOPair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CppBlockUtils.new_TxIOPair(*args)
        try: self.this.append(this)
        except: self.this = this
    def hasTxOut(self): return _CppBlockUtils.TxIOPair_hasTxOut(self)
    def hasTxIn(self): return _CppBlockUtils.TxIOPair_hasTxIn(self)
    def hasTxOutInMain(self): return _CppBlockUtils.TxIOPair_hasTxOutInMain(self)
    def hasTxInInMain(self): return _CppBlockUtils.TxIOPair_hasTxInInMain(self)
    def hasTxOutZC(self): return _CppBlockUtils.TxIOPair_hasTxOutZC(self)
    def hasTxInZC(self): return _CppBlockUtils.TxIOPair_hasTxInZC(self)
    def hasValue(self): return _CppBlockUtils.TxIOPair_hasValue(self)
    def getValue(self): return _CppBlockUtils.TxIOPair_getValue(self)
    def getTxOut(self): return _CppBlockUtils.TxIOPair_getTxOut(self)
    def getTxIn(self): return _CppBlockUtils.TxIOPair_getTxIn(self)
    def getTxOutZC(self): return _CppBlockUtils.TxIOPair_getTxOutZC(self)
    def getTxInZC(self): return _CppBlockUtils.TxIOPair_getTxInZC(self)
    def getTxRefOfOutput(self): return _CppBlockUtils.TxIOPair_getTxRefOfOutput(self)
    def getTxRefOfInput(self): return _CppBlockUtils.TxIOPair_getTxRefOfInput(self)
    def getOutPoint(self): return _CppBlockUtils.TxIOPair_getOutPoint(self)
    def reassessValidity(self): return _CppBlockUtils.TxIOPair_reassessValidity(self)
    def isTxOutFromSelf(self): return _CppBlockUtils.TxIOPair_isTxOutFromSelf(self)
    def setTxOutFromSelf(self, isTrue = True): return _CppBlockUtils.TxIOPair_setTxOutFromSelf(self, isTrue)
    def isFromCoinbase(self): return _CppBlockUtils.TxIOPair_isFromCoinbase(self)
    def setFromCoinbase(self, isTrue = True): return _CppBlockUtils.TxIOPair_setFromCoinbase(self, isTrue)
    def getTxHashOfInput(self): return _CppBlockUtils.TxIOPair_getTxHashOfInput(self)
    def getTxHashOfOutput(self): return _CppBlockUtils.TxIOPair_getTxHashOfOutput(self)
    def setTxIn(self, *args): return _CppBlockUtils.TxIOPair_setTxIn(self, *args)
    def setTxOut(self, *args): return _CppBlockUtils.TxIOPair_setTxOut(self, *args)
    def setTxInZC(self, *args): return _CppBlockUtils.TxIOPair_setTxInZC(self, *args)
    def setTxOutZC(self, *args): return _CppBlockUtils.TxIOPair_setTxOutZC(self, *args)
    def isSourceUnknown(self): return _CppBlockUtils.TxIOPair_isSourceUnknown(self)
    def isStandardTxOutScript(self): return _CppBlockUtils.TxIOPair_isStandardTxOutScript(self)
    def isSpent(self): return _CppBlockUtils.TxIOPair_isSpent(self)
    def isUnspent(self): return _CppBlockUtils.TxIOPair_isUnspent(self)
    def isSpendable(self, currBlk = 0): return _CppBlockUtils.TxIOPair_isSpendable(self, currBlk)
    def isMineButUnconfirmed(self, *args): return _CppBlockUtils.TxIOPair_isMineButUnconfirmed(self, *args)
    def clearZCFields(self): return _CppBlockUtils.TxIOPair_clearZCFields(self)
    def pprintOneLine(self): return _CppBlockUtils.TxIOPair_pprintOneLine(self)
    __swig_destroy__ = _CppBlockUtils.delete_TxIOPair
    __del__ = lambda self : None;
TxIOPair_swigregister = _CppBlockUtils.TxIOPair_swigregister
TxIOPair_swigregister(TxIOPair)

class LedgerEntry:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LedgerEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LedgerEntry, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CppBlockUtils.new_LedgerEntry(*args)
        try: self.this.append(this)
        except: self.this = this
    def getAddrStr20(self): return _CppBlockUtils.LedgerEntry_getAddrStr20(self)
    def getValue(self): return _CppBlockUtils.LedgerEntry_getValue(self)
    def getBlockNum(self): return _CppBlockUtils.LedgerEntry_getBlockNum(self)
    def getTxHash(self): return _CppBlockUtils.LedgerEntry_getTxHash(self)
    def getIndex(self): return _CppBlockUtils.LedgerEntry_getIndex(self)
    def getTxTime(self): return _CppBlockUtils.LedgerEntry_getTxTime(self)
    def isValid(self): return _CppBlockUtils.LedgerEntry_isValid(self)
    def isCoinbase(self): return _CppBlockUtils.LedgerEntry_isCoinbase(self)
    def isSentToSelf(self): return _CppBlockUtils.LedgerEntry_isSentToSelf(self)
    def isChangeBack(self): return _CppBlockUtils.LedgerEntry_isChangeBack(self)
    def setAddr20(self, *args): return _CppBlockUtils.LedgerEntry_setAddr20(self, *args)
    def setValid(self, b = True): return _CppBlockUtils.LedgerEntry_setValid(self, b)
    def changeBlkNum(self, *args): return _CppBlockUtils.LedgerEntry_changeBlkNum(self, *args)
    def __lt__(self, *args): return _CppBlockUtils.LedgerEntry___lt__(self, *args)
    def __eq__(self, *args): return _CppBlockUtils.LedgerEntry___eq__(self, *args)
    def pprint(self): return _CppBlockUtils.LedgerEntry_pprint(self)
    def pprintOneLine(self): return _CppBlockUtils.LedgerEntry_pprintOneLine(self)
    __swig_destroy__ = _CppBlockUtils.delete_LedgerEntry
    __del__ = lambda self : None;
LedgerEntry_swigregister = _CppBlockUtils.LedgerEntry_swigregister
LedgerEntry_swigregister(LedgerEntry)

class RegisteredTx:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegisteredTx, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RegisteredTx, name)
    __repr__ = _swig_repr
    __swig_setmethods__["txrefPtr_"] = _CppBlockUtils.RegisteredTx_txrefPtr__set
    __swig_getmethods__["txrefPtr_"] = _CppBlockUtils.RegisteredTx_txrefPtr__get
    __swig_setmethods__["txHash_"] = _CppBlockUtils.RegisteredTx_txHash__set
    __swig_getmethods__["txHash_"] = _CppBlockUtils.RegisteredTx_txHash__get
    __swig_setmethods__["blkNum_"] = _CppBlockUtils.RegisteredTx_blkNum__set
    __swig_getmethods__["blkNum_"] = _CppBlockUtils.RegisteredTx_blkNum__get
    __swig_setmethods__["txIndex_"] = _CppBlockUtils.RegisteredTx_txIndex__set
    __swig_getmethods__["txIndex_"] = _CppBlockUtils.RegisteredTx_txIndex__get
    def getTxRefPtr(self): return _CppBlockUtils.RegisteredTx_getTxRefPtr(self)
    def getTxCopy(self): return _CppBlockUtils.RegisteredTx_getTxCopy(self)
    def getTxHash(self): return _CppBlockUtils.RegisteredTx_getTxHash(self)
    def getBlkNum(self): return _CppBlockUtils.RegisteredTx_getBlkNum(self)
    def getTxIndex(self): return _CppBlockUtils.RegisteredTx_getTxIndex(self)
    def __init__(self, *args): 
        this = _CppBlockUtils.new_RegisteredTx(*args)
        try: self.this.append(this)
        except: self.this = this
    def __lt__(self, *args): return _CppBlockUtils.RegisteredTx___lt__(self, *args)
    __swig_destroy__ = _CppBlockUtils.delete_RegisteredTx
    __del__ = lambda self : None;
RegisteredTx_swigregister = _CppBlockUtils.RegisteredTx_swigregister
RegisteredTx_swigregister(RegisteredTx)

class AddressBookEntry:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AddressBookEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AddressBookEntry, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CppBlockUtils.new_AddressBookEntry(*args)
        try: self.this.append(this)
        except: self.this = this
    def addTx(self, *args): return _CppBlockUtils.AddressBookEntry_addTx(self, *args)
    def getAddr160(self): return _CppBlockUtils.AddressBookEntry_getAddr160(self)
    def getTxList(self): return _CppBlockUtils.AddressBookEntry_getTxList(self)
    def __lt__(self, *args): return _CppBlockUtils.AddressBookEntry___lt__(self, *args)
    __swig_destroy__ = _CppBlockUtils.delete_AddressBookEntry
    __del__ = lambda self : None;
AddressBookEntry_swigregister = _CppBlockUtils.AddressBookEntry_swigregister
AddressBookEntry_swigregister(AddressBookEntry)

class BtcAddress:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BtcAddress, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BtcAddress, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CppBlockUtils.new_BtcAddress(*args)
        try: self.this.append(this)
        except: self.this = this
    def getAddrStr20(self): return _CppBlockUtils.BtcAddress_getAddrStr20(self)
    def getFirstBlockNum(self): return _CppBlockUtils.BtcAddress_getFirstBlockNum(self)
    def getFirstTimestamp(self): return _CppBlockUtils.BtcAddress_getFirstTimestamp(self)
    def getLastBlockNum(self): return _CppBlockUtils.BtcAddress_getLastBlockNum(self)
    def getLastTimestamp(self): return _CppBlockUtils.BtcAddress_getLastTimestamp(self)
    def setFirstBlockNum(self, *args): return _CppBlockUtils.BtcAddress_setFirstBlockNum(self, *args)
    def setFirstTimestamp(self, *args): return _CppBlockUtils.BtcAddress_setFirstTimestamp(self, *args)
    def setLastBlockNum(self, *args): return _CppBlockUtils.BtcAddress_setLastBlockNum(self, *args)
    def setLastTimestamp(self, *args): return _CppBlockUtils.BtcAddress_setLastTimestamp(self, *args)
    def setAddrStr20(self, *args): return _CppBlockUtils.BtcAddress_setAddrStr20(self, *args)
    def sortLedger(self): return _CppBlockUtils.BtcAddress_sortLedger(self)
    def removeInvalidEntries(self): return _CppBlockUtils.BtcAddress_removeInvalidEntries(self)
    def getFullBalance(self): return _CppBlockUtils.BtcAddress_getFullBalance(self)
    def getSpendableBalance(self, currBlk = 0): return _CppBlockUtils.BtcAddress_getSpendableBalance(self, currBlk)
    def getUnconfirmedBalance(self, *args): return _CppBlockUtils.BtcAddress_getUnconfirmedBalance(self, *args)
    def getFullTxOutList(self, currBlk = 0): return _CppBlockUtils.BtcAddress_getFullTxOutList(self, currBlk)
    def getSpendableTxOutList(self, currBlk = 0): return _CppBlockUtils.BtcAddress_getSpendableTxOutList(self, currBlk)
    def clearZeroConfPool(self): return _CppBlockUtils.BtcAddress_clearZeroConfPool(self)
    def getTxLedger(self): return _CppBlockUtils.BtcAddress_getTxLedger(self)
    def getZeroConfLedger(self): return _CppBlockUtils.BtcAddress_getZeroConfLedger(self)
    def getTxIOList(self): return _CppBlockUtils.BtcAddress_getTxIOList(self)
    def addTxIO(self, *args): return _CppBlockUtils.BtcAddress_addTxIO(self, *args)
    def addLedgerEntry(self, *args): return _CppBlockUtils.BtcAddress_addLedgerEntry(self, *args)
    def pprintLedger(self): return _CppBlockUtils.BtcAddress_pprintLedger(self)
    def clearBlkData(self): return _CppBlockUtils.BtcAddress_clearBlkData(self)
    __swig_destroy__ = _CppBlockUtils.delete_BtcAddress
    __del__ = lambda self : None;
BtcAddress_swigregister = _CppBlockUtils.BtcAddress_swigregister
BtcAddress_swigregister(BtcAddress)

class BtcWallet:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BtcWallet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BtcWallet, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _CppBlockUtils.new_BtcWallet()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CppBlockUtils.delete_BtcWallet
    __del__ = lambda self : None;
    def addNewAddress(self, *args): return _CppBlockUtils.BtcWallet_addNewAddress(self, *args)
    def addAddress(self, *args): return _CppBlockUtils.BtcWallet_addAddress(self, *args)
    def addAddress_BtcAddress_(self, *args): return _CppBlockUtils.BtcWallet_addAddress_BtcAddress_(self, *args)
    def addAddress_1_(self, *args): return _CppBlockUtils.BtcWallet_addAddress_1_(self, *args)
    def addNewAddress_1_(self, *args): return _CppBlockUtils.BtcWallet_addNewAddress_1_(self, *args)
    def addAddress_3_(self, *args): return _CppBlockUtils.BtcWallet_addAddress_3_(self, *args)
    def addAddress_5_(self, *args): return _CppBlockUtils.BtcWallet_addAddress_5_(self, *args)
    def hasAddr(self, *args): return _CppBlockUtils.BtcWallet_hasAddr(self, *args)
    def isMineBulkFilter(self, *args): return _CppBlockUtils.BtcWallet_isMineBulkFilter(self, *args)
    def scanTx(self, *args): return _CppBlockUtils.BtcWallet_scanTx(self, *args)
    def scanNonStdTx(self, *args): return _CppBlockUtils.BtcWallet_scanNonStdTx(self, *args)
    def calcLedgerEntryForTx(self, *args): return _CppBlockUtils.BtcWallet_calcLedgerEntryForTx(self, *args)
    def calcLedgerEntryForTxStr(self, *args): return _CppBlockUtils.BtcWallet_calcLedgerEntryForTxStr(self, *args)
    def getFullBalance(self): return _CppBlockUtils.BtcWallet_getFullBalance(self)
    def getSpendableBalance(self, currBlk = 0): return _CppBlockUtils.BtcWallet_getSpendableBalance(self, currBlk)
    def getUnconfirmedBalance(self, *args): return _CppBlockUtils.BtcWallet_getUnconfirmedBalance(self, *args)
    def getFullTxOutList(self, currBlk = 0): return _CppBlockUtils.BtcWallet_getFullTxOutList(self, currBlk)
    def getSpendableTxOutList(self, currBlk = 0): return _CppBlockUtils.BtcWallet_getSpendableTxOutList(self, currBlk)
    def clearZeroConfPool(self): return _CppBlockUtils.BtcWallet_clearZeroConfPool(self)
    def getNumAddr(self): return _CppBlockUtils.BtcWallet_getNumAddr(self)
    def getAddrByIndex(self, *args): return _CppBlockUtils.BtcWallet_getAddrByIndex(self, *args)
    def getAddrByHash160(self, *args): return _CppBlockUtils.BtcWallet_getAddrByHash160(self, *args)
    def sortLedger(self): return _CppBlockUtils.BtcWallet_sortLedger(self)
    def removeInvalidEntries(self): return _CppBlockUtils.BtcWallet_removeInvalidEntries(self)
    def getZeroConfLedger(self, addr160 = None): return _CppBlockUtils.BtcWallet_getZeroConfLedger(self, addr160)
    def getTxLedger(self, addr160 = None): return _CppBlockUtils.BtcWallet_getTxLedger(self, addr160)
    def getTxIOMap(self): return _CppBlockUtils.BtcWallet_getTxIOMap(self)
    def getNonStdTxIO(self): return _CppBlockUtils.BtcWallet_getNonStdTxIO(self)
    def isOutPointMine(self, *args): return _CppBlockUtils.BtcWallet_isOutPointMine(self, *args)
    def pprintLedger(self): return _CppBlockUtils.BtcWallet_pprintLedger(self)
    def pprintAlot(self, topBlk = 0, withAddr = False): return _CppBlockUtils.BtcWallet_pprintAlot(self, topBlk, withAddr)
    def setBdmPtr(self, *args): return _CppBlockUtils.BtcWallet_setBdmPtr(self, *args)
    def clearBlkData(self): return _CppBlockUtils.BtcWallet_clearBlkData(self)
    def createAddressBook(self): return _CppBlockUtils.BtcWallet_createAddressBook(self)
    def getEmptyLedger(self): return _CppBlockUtils.BtcWallet_getEmptyLedger(self)
BtcWallet_swigregister = _CppBlockUtils.BtcWallet_swigregister
BtcWallet_swigregister(BtcWallet)

class ZeroConfData:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZeroConfData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZeroConfData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["txobj_"] = _CppBlockUtils.ZeroConfData_txobj__set
    __swig_getmethods__["txobj_"] = _CppBlockUtils.ZeroConfData_txobj__get
    __swig_setmethods__["txtime_"] = _CppBlockUtils.ZeroConfData_txtime__set
    __swig_getmethods__["txtime_"] = _CppBlockUtils.ZeroConfData_txtime__get
    __swig_setmethods__["iter_"] = _CppBlockUtils.ZeroConfData_iter__set
    __swig_getmethods__["iter_"] = _CppBlockUtils.ZeroConfData_iter__get
    def __init__(self): 
        this = _CppBlockUtils.new_ZeroConfData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CppBlockUtils.delete_ZeroConfData
    __del__ = lambda self : None;
ZeroConfData_swigregister = _CppBlockUtils.ZeroConfData_swigregister
ZeroConfData_swigregister(ZeroConfData)

class RegisteredAddress:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegisteredAddress, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RegisteredAddress, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CppBlockUtils.new_RegisteredAddress(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["addr160_"] = _CppBlockUtils.RegisteredAddress_addr160__set
    __swig_getmethods__["addr160_"] = _CppBlockUtils.RegisteredAddress_addr160__get
    __swig_setmethods__["blkCreated_"] = _CppBlockUtils.RegisteredAddress_blkCreated__set
    __swig_getmethods__["blkCreated_"] = _CppBlockUtils.RegisteredAddress_blkCreated__get
    __swig_setmethods__["alreadyScannedUpToBlk_"] = _CppBlockUtils.RegisteredAddress_alreadyScannedUpToBlk__set
    __swig_getmethods__["alreadyScannedUpToBlk_"] = _CppBlockUtils.RegisteredAddress_alreadyScannedUpToBlk__get
    def __eq__(self, *args): return _CppBlockUtils.RegisteredAddress___eq__(self, *args)
    def __lt__(self, *args): return _CppBlockUtils.RegisteredAddress___lt__(self, *args)
    def __gt__(self, *args): return _CppBlockUtils.RegisteredAddress___gt__(self, *args)
    __swig_destroy__ = _CppBlockUtils.delete_RegisteredAddress
    __del__ = lambda self : None;
RegisteredAddress_swigregister = _CppBlockUtils.RegisteredAddress_swigregister
RegisteredAddress_swigregister(RegisteredAddress)

BDM_MODE_FULL_BLOCKCHAIN = _CppBlockUtils.BDM_MODE_FULL_BLOCKCHAIN
BDM_MODE_LIGHT_STORAGE = _CppBlockUtils.BDM_MODE_LIGHT_STORAGE
BDM_MODE_NO_STORAGE = _CppBlockUtils.BDM_MODE_NO_STORAGE
BDM_MODE_COUNT = _CppBlockUtils.BDM_MODE_COUNT
ADD_BLOCK_SUCCEEDED = _CppBlockUtils.ADD_BLOCK_SUCCEEDED
ADD_BLOCK_NEW_TOP_BLOCK = _CppBlockUtils.ADD_BLOCK_NEW_TOP_BLOCK
ADD_BLOCK_CAUSED_REORG = _CppBlockUtils.ADD_BLOCK_CAUSED_REORG
class BlockDataManager_FileRefs:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockDataManager_FileRefs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlockDataManager_FileRefs, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["GetInstance"] = lambda x: _CppBlockUtils.BlockDataManager_FileRefs_GetInstance
    def isInitialized(self): return _CppBlockUtils.BlockDataManager_FileRefs_isInitialized(self)
    def SetHomeDirLocation(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_SetHomeDirLocation(self, *args)
    def SetBlkFileLocation(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_SetBlkFileLocation(self, *args)
    def SetBtcNetworkParams(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_SetBtcNetworkParams(self, *args)
    def SelectNetwork(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_SelectNetwork(self, *args)
    def getGenesisHash(self): return _CppBlockUtils.BlockDataManager_FileRefs_getGenesisHash(self)
    def getGenesisTxHash(self): return _CppBlockUtils.BlockDataManager_FileRefs_getGenesisTxHash(self)
    def getMagicBytes(self): return _CppBlockUtils.BlockDataManager_FileRefs_getMagicBytes(self)
    def getTotalBlockchainBytes(self): return _CppBlockUtils.BlockDataManager_FileRefs_getTotalBlockchainBytes(self)
    def getTotalBlkFiles(self): return _CppBlockUtils.BlockDataManager_FileRefs_getTotalBlkFiles(self)
    def getLoadProgressBytes(self): return _CppBlockUtils.BlockDataManager_FileRefs_getLoadProgressBytes(self)
    def getLoadProgressBlocks(self): return _CppBlockUtils.BlockDataManager_FileRefs_getLoadProgressBlocks(self)
    def getLoadProgressFiles(self): return _CppBlockUtils.BlockDataManager_FileRefs_getLoadProgressFiles(self)
    def Reset(self): return _CppBlockUtils.BlockDataManager_FileRefs_Reset(self)
    def getNumConfirmations(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_getNumConfirmations(self, *args)
    def getTopBlockHeader(self): return _CppBlockUtils.BlockDataManager_FileRefs_getTopBlockHeader(self)
    def getGenesisBlock(self): return _CppBlockUtils.BlockDataManager_FileRefs_getGenesisBlock(self)
    def getHeaderByHeight(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_getHeaderByHeight(self, *args)
    def getHeaderByHash(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_getHeaderByHash(self, *args)
    def getBlockfilePath(self): return _CppBlockUtils.BlockDataManager_FileRefs_getBlockfilePath(self)
    def getTxRefPtrByHash(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_getTxRefPtrByHash(self, *args)
    def getTxByHash(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_getTxByHash(self, *args)
    def insertTxRef(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_insertTxRef(self, *args)
    def getTopBlockHeight(self): return _CppBlockUtils.BlockDataManager_FileRefs_getTopBlockHeight(self)
    def isDirty(self, numBlockToBeConsideredDirty = 2016): return _CppBlockUtils.BlockDataManager_FileRefs_isDirty(self, numBlockToBeConsideredDirty)
    def getNumHeaders(self): return _CppBlockUtils.BlockDataManager_FileRefs_getNumHeaders(self)
    def registerWallet(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_registerWallet(self, *args)
    def unregisterWallet(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_unregisterWallet(self, *args)
    def registerAddress(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_registerAddress(self, *args)
    def registerNewAddress(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_registerNewAddress(self, *args)
    def registerImportedAddress(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_registerImportedAddress(self, *args)
    def unregisterAddress(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_unregisterAddress(self, *args)
    def evalLowestBlockNextScan(self): return _CppBlockUtils.BlockDataManager_FileRefs_evalLowestBlockNextScan(self)
    def evalLowestAddressCreationBlock(self): return _CppBlockUtils.BlockDataManager_FileRefs_evalLowestAddressCreationBlock(self)
    def evalRescanIsRequired(self): return _CppBlockUtils.BlockDataManager_FileRefs_evalRescanIsRequired(self)
    def numBlocksToRescan(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_numBlocksToRescan(self, *args)
    def updateRegisteredAddresses(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_updateRegisteredAddresses(self, *args)
    def walletIsRegistered(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_walletIsRegistered(self, *args)
    def addressIsRegistered(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_addressIsRegistered(self, *args)
    def insertRegisteredTxIfNew(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_insertRegisteredTxIfNew(self, *args)
    def registeredAddrScan(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_registeredAddrScan(self, *args)
    def resetRegisteredWallets(self): return _CppBlockUtils.BlockDataManager_FileRefs_resetRegisteredWallets(self)
    def pprintRegisteredWallets(self): return _CppBlockUtils.BlockDataManager_FileRefs_pprintRegisteredWallets(self)
    def parseNewBlock(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_parseNewBlock(self, *args)
    def parseEntireBlockchain(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_parseEntireBlockchain(self, *args)
    def addNewBlockData(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_addNewBlockData(self, *args)
    def reassessAfterReorg(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_reassessAfterReorg(self, *args)
    def hasTxWithHash(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_hasTxWithHash(self, *args)
    def hasHeaderWithHash(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_hasHeaderWithHash(self, *args)
    def getNumBlocks(self): return _CppBlockUtils.BlockDataManager_FileRefs_getNumBlocks(self)
    def getNumTx(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_getNumTx(self, *args)
    def getHeadersNotOnMainChain(self): return _CppBlockUtils.BlockDataManager_FileRefs_getHeadersNotOnMainChain(self)
    def prefixSearchHeaders(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_prefixSearchHeaders(self, *args)
    def prefixSearchTx(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_prefixSearchTx(self, *args)
    def prefixSearchAddress(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_prefixSearchAddress(self, *args)
    def scanBlockchainForTx(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_scanBlockchainForTx(self, *args)
    def rescanBlocks(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_rescanBlocks(self, *args)
    def scanRegisteredTxForWallet(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_scanRegisteredTxForWallet(self, *args)
    def readBlkFileUpdate(self): return _CppBlockUtils.BlockDataManager_FileRefs_readBlkFileUpdate(self)
    def verifyBlkFileIntegrity(self): return _CppBlockUtils.BlockDataManager_FileRefs_verifyBlkFileIntegrity(self)
    def enableZeroConf(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_enableZeroConf(self, *args)
    def disableZeroConf(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_disableZeroConf(self, *args)
    def readZeroConfFile(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_readZeroConfFile(self, *args)
    def addNewZeroConfTx(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_addNewZeroConfTx(self, *args)
    def purgeZeroConfPool(self): return _CppBlockUtils.BlockDataManager_FileRefs_purgeZeroConfPool(self)
    def pprintZeroConfPool(self): return _CppBlockUtils.BlockDataManager_FileRefs_pprintZeroConfPool(self)
    def rewriteZeroConfFile(self): return _CppBlockUtils.BlockDataManager_FileRefs_rewriteZeroConfFile(self)
    def rescanWalletZeroConf(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_rescanWalletZeroConf(self, *args)
    def isTxFinal(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_isTxFinal(self, *args)
    def organizeChain(self, forceRebuild = False): return _CppBlockUtils.BlockDataManager_FileRefs_organizeChain(self, forceRebuild)
    def isLastBlockReorg(self): return _CppBlockUtils.BlockDataManager_FileRefs_isLastBlockReorg(self)
    def getTxJustInvalidated(self): return _CppBlockUtils.BlockDataManager_FileRefs_getTxJustInvalidated(self)
    def getTxJustAffected(self): return _CppBlockUtils.BlockDataManager_FileRefs_getTxJustAffected(self)
    def updateWalletAfterReorg(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_updateWalletAfterReorg(self, *args)
    def updateWalletsAfterReorg(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_updateWalletsAfterReorg(self, *args)
    def getPrevTxOut(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_getPrevTxOut(self, *args)
    def getSenderAddr20(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_getSenderAddr20(self, *args)
    def getSentValue(self, *args): return _CppBlockUtils.BlockDataManager_FileRefs_getSentValue(self, *args)
    def getTxHintMapRef(self): return _CppBlockUtils.BlockDataManager_FileRefs_getTxHintMapRef(self)
    def getHeaderMapRef(self): return _CppBlockUtils.BlockDataManager_FileRefs_getHeaderMapRef(self)
    def getHeadersByHeightRef(self): return _CppBlockUtils.BlockDataManager_FileRefs_getHeadersByHeightRef(self)
    __swig_destroy__ = _CppBlockUtils.delete_BlockDataManager_FileRefs
    __del__ = lambda self : None;
BlockDataManager_FileRefs_swigregister = _CppBlockUtils.BlockDataManager_FileRefs_swigregister
BlockDataManager_FileRefs_swigregister(BlockDataManager_FileRefs)

def BlockDataManager_FileRefs_GetInstance():
  return _CppBlockUtils.BlockDataManager_FileRefs_GetInstance()
BlockDataManager_FileRefs_GetInstance = _CppBlockUtils.BlockDataManager_FileRefs_GetInstance

class BlockDataManager:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockDataManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlockDataManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _CppBlockUtils.new_BlockDataManager()
        try: self.this.append(this)
        except: self.this = this
    def getBDM(self): return _CppBlockUtils.BlockDataManager_getBDM(self)
    __swig_destroy__ = _CppBlockUtils.delete_BlockDataManager
    __del__ = lambda self : None;
BlockDataManager_swigregister = _CppBlockUtils.BlockDataManager_swigregister
BlockDataManager_swigregister(BlockDataManager)

HEADER_SIZE = _CppBlockUtils.HEADER_SIZE
CONVERTBTC = _CppBlockUtils.CONVERTBTC
TESTNET_MAGIC_BYTES = _CppBlockUtils.TESTNET_MAGIC_BYTES
TESTNET_GENESIS_HASH_HEX = _CppBlockUtils.TESTNET_GENESIS_HASH_HEX
TESTNET_GENESIS_TX_HASH_HEX = _CppBlockUtils.TESTNET_GENESIS_TX_HASH_HEX
MAINNET_MAGIC_BYTES = _CppBlockUtils.MAINNET_MAGIC_BYTES
MAINNET_GENESIS_HASH_HEX = _CppBlockUtils.MAINNET_GENESIS_HASH_HEX
MAINNET_GENESIS_TX_HASH_HEX = _CppBlockUtils.MAINNET_GENESIS_TX_HASH_HEX
TXOUT_SCRIPT_STANDARD = _CppBlockUtils.TXOUT_SCRIPT_STANDARD
TXOUT_SCRIPT_COINBASE = _CppBlockUtils.TXOUT_SCRIPT_COINBASE
TXOUT_SCRIPT_UNKNOWN = _CppBlockUtils.TXOUT_SCRIPT_UNKNOWN
TXIN_SCRIPT_STANDARD = _CppBlockUtils.TXIN_SCRIPT_STANDARD
TXIN_SCRIPT_COINBASE = _CppBlockUtils.TXIN_SCRIPT_COINBASE
TXIN_SCRIPT_SPENDCB = _CppBlockUtils.TXIN_SCRIPT_SPENDCB
TXIN_SCRIPT_UNKNOWN = _CppBlockUtils.TXIN_SCRIPT_UNKNOWN
OP_0 = _CppBlockUtils.OP_0
OP_FALSE = _CppBlockUtils.OP_FALSE
OP_PUSHDATA1 = _CppBlockUtils.OP_PUSHDATA1
OP_PUSHDATA2 = _CppBlockUtils.OP_PUSHDATA2
OP_PUSHDATA4 = _CppBlockUtils.OP_PUSHDATA4
OP_1NEGATE = _CppBlockUtils.OP_1NEGATE
OP_RESERVED = _CppBlockUtils.OP_RESERVED
OP_1 = _CppBlockUtils.OP_1
OP_TRUE = _CppBlockUtils.OP_TRUE
OP_2 = _CppBlockUtils.OP_2
OP_3 = _CppBlockUtils.OP_3
OP_4 = _CppBlockUtils.OP_4
OP_5 = _CppBlockUtils.OP_5
OP_6 = _CppBlockUtils.OP_6
OP_7 = _CppBlockUtils.OP_7
OP_8 = _CppBlockUtils.OP_8
OP_9 = _CppBlockUtils.OP_9
OP_10 = _CppBlockUtils.OP_10
OP_11 = _CppBlockUtils.OP_11
OP_12 = _CppBlockUtils.OP_12
OP_13 = _CppBlockUtils.OP_13
OP_14 = _CppBlockUtils.OP_14
OP_15 = _CppBlockUtils.OP_15
OP_16 = _CppBlockUtils.OP_16
OP_NOP = _CppBlockUtils.OP_NOP
OP_VER = _CppBlockUtils.OP_VER
OP_IF = _CppBlockUtils.OP_IF
OP_NOTIF = _CppBlockUtils.OP_NOTIF
OP_VERIF = _CppBlockUtils.OP_VERIF
OP_VERNOTIF = _CppBlockUtils.OP_VERNOTIF
OP_ELSE = _CppBlockUtils.OP_ELSE
OP_ENDIF = _CppBlockUtils.OP_ENDIF
OP_VERIFY = _CppBlockUtils.OP_VERIFY
OP_RETURN = _CppBlockUtils.OP_RETURN
OP_TOALTSTACK = _CppBlockUtils.OP_TOALTSTACK
OP_FROMALTSTACK = _CppBlockUtils.OP_FROMALTSTACK
OP_2DROP = _CppBlockUtils.OP_2DROP
OP_2DUP = _CppBlockUtils.OP_2DUP
OP_3DUP = _CppBlockUtils.OP_3DUP
OP_2OVER = _CppBlockUtils.OP_2OVER
OP_2ROT = _CppBlockUtils.OP_2ROT
OP_2SWAP = _CppBlockUtils.OP_2SWAP
OP_IFDUP = _CppBlockUtils.OP_IFDUP
OP_DEPTH = _CppBlockUtils.OP_DEPTH
OP_DROP = _CppBlockUtils.OP_DROP
OP_DUP = _CppBlockUtils.OP_DUP
OP_NIP = _CppBlockUtils.OP_NIP
OP_OVER = _CppBlockUtils.OP_OVER
OP_PICK = _CppBlockUtils.OP_PICK
OP_ROLL = _CppBlockUtils.OP_ROLL
OP_ROT = _CppBlockUtils.OP_ROT
OP_SWAP = _CppBlockUtils.OP_SWAP
OP_TUCK = _CppBlockUtils.OP_TUCK
OP_CAT = _CppBlockUtils.OP_CAT
OP_SUBSTR = _CppBlockUtils.OP_SUBSTR
OP_LEFT = _CppBlockUtils.OP_LEFT
OP_RIGHT = _CppBlockUtils.OP_RIGHT
OP_SIZE = _CppBlockUtils.OP_SIZE
OP_INVERT = _CppBlockUtils.OP_INVERT
OP_AND = _CppBlockUtils.OP_AND
OP_OR = _CppBlockUtils.OP_OR
OP_XOR = _CppBlockUtils.OP_XOR
OP_EQUAL = _CppBlockUtils.OP_EQUAL
OP_EQUALVERIFY = _CppBlockUtils.OP_EQUALVERIFY
OP_RESERVED1 = _CppBlockUtils.OP_RESERVED1
OP_RESERVED2 = _CppBlockUtils.OP_RESERVED2
OP_1ADD = _CppBlockUtils.OP_1ADD
OP_1SUB = _CppBlockUtils.OP_1SUB
OP_2MUL = _CppBlockUtils.OP_2MUL
OP_2DIV = _CppBlockUtils.OP_2DIV
OP_NEGATE = _CppBlockUtils.OP_NEGATE
OP_ABS = _CppBlockUtils.OP_ABS
OP_NOT = _CppBlockUtils.OP_NOT
OP_0NOTEQUAL = _CppBlockUtils.OP_0NOTEQUAL
OP_ADD = _CppBlockUtils.OP_ADD
OP_SUB = _CppBlockUtils.OP_SUB
OP_MUL = _CppBlockUtils.OP_MUL
OP_DIV = _CppBlockUtils.OP_DIV
OP_MOD = _CppBlockUtils.OP_MOD
OP_LSHIFT = _CppBlockUtils.OP_LSHIFT
OP_RSHIFT = _CppBlockUtils.OP_RSHIFT
OP_BOOLAND = _CppBlockUtils.OP_BOOLAND
OP_BOOLOR = _CppBlockUtils.OP_BOOLOR
OP_NUMEQUAL = _CppBlockUtils.OP_NUMEQUAL
OP_NUMEQUALVERIFY = _CppBlockUtils.OP_NUMEQUALVERIFY
OP_NUMNOTEQUAL = _CppBlockUtils.OP_NUMNOTEQUAL
OP_LESSTHAN = _CppBlockUtils.OP_LESSTHAN
OP_GREATERTHAN = _CppBlockUtils.OP_GREATERTHAN
OP_LESSTHANOREQUAL = _CppBlockUtils.OP_LESSTHANOREQUAL
OP_GREATERTHANOREQUAL = _CppBlockUtils.OP_GREATERTHANOREQUAL
OP_MIN = _CppBlockUtils.OP_MIN
OP_MAX = _CppBlockUtils.OP_MAX
OP_WITHIN = _CppBlockUtils.OP_WITHIN
OP_RIPEMD160 = _CppBlockUtils.OP_RIPEMD160
OP_SHA1 = _CppBlockUtils.OP_SHA1
OP_SHA256 = _CppBlockUtils.OP_SHA256
OP_HASH160 = _CppBlockUtils.OP_HASH160
OP_HASH256 = _CppBlockUtils.OP_HASH256
OP_CODESEPARATOR = _CppBlockUtils.OP_CODESEPARATOR
OP_CHECKSIG = _CppBlockUtils.OP_CHECKSIG
OP_CHECKSIGVERIFY = _CppBlockUtils.OP_CHECKSIGVERIFY
OP_CHECKMULTISIG = _CppBlockUtils.OP_CHECKMULTISIG
OP_CHECKMULTISIGVERIFY = _CppBlockUtils.OP_CHECKMULTISIGVERIFY
OP_NOP1 = _CppBlockUtils.OP_NOP1
OP_NOP2 = _CppBlockUtils.OP_NOP2
OP_NOP3 = _CppBlockUtils.OP_NOP3
OP_NOP4 = _CppBlockUtils.OP_NOP4
OP_NOP5 = _CppBlockUtils.OP_NOP5
OP_NOP6 = _CppBlockUtils.OP_NOP6
OP_NOP7 = _CppBlockUtils.OP_NOP7
OP_NOP8 = _CppBlockUtils.OP_NOP8
OP_NOP9 = _CppBlockUtils.OP_NOP9
OP_NOP10 = _CppBlockUtils.OP_NOP10
OP_PUBKEYHASH = _CppBlockUtils.OP_PUBKEYHASH
OP_PUBKEY = _CppBlockUtils.OP_PUBKEY
OP_INVALIDOPCODE = _CppBlockUtils.OP_INVALIDOPCODE
class BtcUtils:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BtcUtils, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BtcUtils, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _CppBlockUtils.new_BtcUtils()
        try: self.this.append(this)
        except: self.this = this
    def hash256(self, *args): return _CppBlockUtils.BtcUtils_hash256(self, *args)
    def hash160(self, *args): return _CppBlockUtils.BtcUtils_hash160(self, *args)
    __swig_setmethods__["BadAddress_"] = _CppBlockUtils.BtcUtils_BadAddress__set
    __swig_getmethods__["BadAddress_"] = _CppBlockUtils.BtcUtils_BadAddress__get
    __swig_setmethods__["EmptyHash_"] = _CppBlockUtils.BtcUtils_EmptyHash__set
    __swig_getmethods__["EmptyHash_"] = _CppBlockUtils.BtcUtils_EmptyHash__get
    __swig_getmethods__["readVarInt"] = lambda x: _CppBlockUtils.BtcUtils_readVarInt
    __swig_getmethods__["readVarIntLength"] = lambda x: _CppBlockUtils.BtcUtils_readVarIntLength
    __swig_getmethods__["calcVarIntSize"] = lambda x: _CppBlockUtils.BtcUtils_calcVarIntSize
    __swig_getmethods__["GetFileSize"] = lambda x: _CppBlockUtils.BtcUtils_GetFileSize
    __swig_getmethods__["numToStrWCommas"] = lambda x: _CppBlockUtils.BtcUtils_numToStrWCommas
    __swig_getmethods__["getHash256_NoSafetyCheck"] = lambda x: _CppBlockUtils.BtcUtils_getHash256_NoSafetyCheck
    __swig_getmethods__["getHash256"] = lambda x: _CppBlockUtils.BtcUtils_getHash256
    __swig_getmethods__["getHash160_NoSafetyCheck"] = lambda x: _CppBlockUtils.BtcUtils_getHash160_NoSafetyCheck
    __swig_getmethods__["getHash160"] = lambda x: _CppBlockUtils.BtcUtils_getHash160
    def getHash160_SWIG(self, *args): return _CppBlockUtils.BtcUtils_getHash160_SWIG(self, *args)
    def ripemd160_SWIG(self, *args): return _CppBlockUtils.BtcUtils_ripemd160_SWIG(self, *args)
    __swig_getmethods__["calculateMerkleRoot"] = lambda x: _CppBlockUtils.BtcUtils_calculateMerkleRoot
    __swig_getmethods__["calculateMerkleTree"] = lambda x: _CppBlockUtils.BtcUtils_calculateMerkleTree
    __swig_getmethods__["TxInCalcLength"] = lambda x: _CppBlockUtils.BtcUtils_TxInCalcLength
    __swig_getmethods__["TxOutCalcLength"] = lambda x: _CppBlockUtils.BtcUtils_TxOutCalcLength
    __swig_getmethods__["TxCalcLength"] = lambda x: _CppBlockUtils.BtcUtils_TxCalcLength
    __swig_getmethods__["getTxOutScriptType"] = lambda x: _CppBlockUtils.BtcUtils_getTxOutScriptType
    __swig_getmethods__["getTxInScriptType"] = lambda x: _CppBlockUtils.BtcUtils_getTxInScriptType
    __swig_getmethods__["getTxOutRecipientAddr"] = lambda x: _CppBlockUtils.BtcUtils_getTxOutRecipientAddr
    __swig_getmethods__["getTxInAddr"] = lambda x: _CppBlockUtils.BtcUtils_getTxInAddr
    __swig_getmethods__["convertDiffBitsToDouble"] = lambda x: _CppBlockUtils.BtcUtils_convertDiffBitsToDouble
    __swig_getmethods__["getBlkFilename"] = lambda x: _CppBlockUtils.BtcUtils_getBlkFilename
    __swig_getmethods__["getOpCodeName"] = lambda x: _CppBlockUtils.BtcUtils_getOpCodeName
    __swig_getmethods__["convertScriptToOpStrings"] = lambda x: _CppBlockUtils.BtcUtils_convertScriptToOpStrings
    __swig_getmethods__["num2str"] = lambda x: _CppBlockUtils.BtcUtils_num2str
    __swig_getmethods__["pprintScript"] = lambda x: _CppBlockUtils.BtcUtils_pprintScript
    __swig_getmethods__["verifyProofOfWork"] = lambda x: _CppBlockUtils.BtcUtils_verifyProofOfWork
    __swig_destroy__ = _CppBlockUtils.delete_BtcUtils
    __del__ = lambda self : None;
BtcUtils_swigregister = _CppBlockUtils.BtcUtils_swigregister
BtcUtils_swigregister(BtcUtils)
cvar = _CppBlockUtils.cvar

def BtcUtils_readVarInt(*args):
  return _CppBlockUtils.BtcUtils_readVarInt(*args)
BtcUtils_readVarInt = _CppBlockUtils.BtcUtils_readVarInt

def BtcUtils_readVarIntLength(*args):
  return _CppBlockUtils.BtcUtils_readVarIntLength(*args)
BtcUtils_readVarIntLength = _CppBlockUtils.BtcUtils_readVarIntLength

def BtcUtils_calcVarIntSize(*args):
  return _CppBlockUtils.BtcUtils_calcVarIntSize(*args)
BtcUtils_calcVarIntSize = _CppBlockUtils.BtcUtils_calcVarIntSize

def BtcUtils_GetFileSize(*args):
  return _CppBlockUtils.BtcUtils_GetFileSize(*args)
BtcUtils_GetFileSize = _CppBlockUtils.BtcUtils_GetFileSize

def BtcUtils_numToStrWCommas(*args):
  return _CppBlockUtils.BtcUtils_numToStrWCommas(*args)
BtcUtils_numToStrWCommas = _CppBlockUtils.BtcUtils_numToStrWCommas

def BtcUtils_getHash256_NoSafetyCheck(*args):
  return _CppBlockUtils.BtcUtils_getHash256_NoSafetyCheck(*args)
BtcUtils_getHash256_NoSafetyCheck = _CppBlockUtils.BtcUtils_getHash256_NoSafetyCheck

def BtcUtils_getHash256(*args):
  return _CppBlockUtils.BtcUtils_getHash256(*args)
BtcUtils_getHash256 = _CppBlockUtils.BtcUtils_getHash256

def BtcUtils_getHash160_NoSafetyCheck(*args):
  return _CppBlockUtils.BtcUtils_getHash160_NoSafetyCheck(*args)
BtcUtils_getHash160_NoSafetyCheck = _CppBlockUtils.BtcUtils_getHash160_NoSafetyCheck

def BtcUtils_getHash160(*args):
  return _CppBlockUtils.BtcUtils_getHash160(*args)
BtcUtils_getHash160 = _CppBlockUtils.BtcUtils_getHash160

def BtcUtils_calculateMerkleRoot(*args):
  return _CppBlockUtils.BtcUtils_calculateMerkleRoot(*args)
BtcUtils_calculateMerkleRoot = _CppBlockUtils.BtcUtils_calculateMerkleRoot

def BtcUtils_calculateMerkleTree(*args):
  return _CppBlockUtils.BtcUtils_calculateMerkleTree(*args)
BtcUtils_calculateMerkleTree = _CppBlockUtils.BtcUtils_calculateMerkleTree

def BtcUtils_TxInCalcLength(*args):
  return _CppBlockUtils.BtcUtils_TxInCalcLength(*args)
BtcUtils_TxInCalcLength = _CppBlockUtils.BtcUtils_TxInCalcLength

def BtcUtils_TxOutCalcLength(*args):
  return _CppBlockUtils.BtcUtils_TxOutCalcLength(*args)
BtcUtils_TxOutCalcLength = _CppBlockUtils.BtcUtils_TxOutCalcLength

def BtcUtils_TxCalcLength(*args):
  return _CppBlockUtils.BtcUtils_TxCalcLength(*args)
BtcUtils_TxCalcLength = _CppBlockUtils.BtcUtils_TxCalcLength

def BtcUtils_getTxOutScriptType(*args):
  return _CppBlockUtils.BtcUtils_getTxOutScriptType(*args)
BtcUtils_getTxOutScriptType = _CppBlockUtils.BtcUtils_getTxOutScriptType

def BtcUtils_getTxInScriptType(*args):
  return _CppBlockUtils.BtcUtils_getTxInScriptType(*args)
BtcUtils_getTxInScriptType = _CppBlockUtils.BtcUtils_getTxInScriptType

def BtcUtils_getTxOutRecipientAddr(*args):
  return _CppBlockUtils.BtcUtils_getTxOutRecipientAddr(*args)
BtcUtils_getTxOutRecipientAddr = _CppBlockUtils.BtcUtils_getTxOutRecipientAddr

def BtcUtils_getTxInAddr(*args):
  return _CppBlockUtils.BtcUtils_getTxInAddr(*args)
BtcUtils_getTxInAddr = _CppBlockUtils.BtcUtils_getTxInAddr

def BtcUtils_convertDiffBitsToDouble(*args):
  return _CppBlockUtils.BtcUtils_convertDiffBitsToDouble(*args)
BtcUtils_convertDiffBitsToDouble = _CppBlockUtils.BtcUtils_convertDiffBitsToDouble

def BtcUtils_getBlkFilename(*args):
  return _CppBlockUtils.BtcUtils_getBlkFilename(*args)
BtcUtils_getBlkFilename = _CppBlockUtils.BtcUtils_getBlkFilename

def BtcUtils_getOpCodeName(*args):
  return _CppBlockUtils.BtcUtils_getOpCodeName(*args)
BtcUtils_getOpCodeName = _CppBlockUtils.BtcUtils_getOpCodeName

def BtcUtils_convertScriptToOpStrings(*args):
  return _CppBlockUtils.BtcUtils_convertScriptToOpStrings(*args)
BtcUtils_convertScriptToOpStrings = _CppBlockUtils.BtcUtils_convertScriptToOpStrings

def BtcUtils_num2str(*args):
  return _CppBlockUtils.BtcUtils_num2str(*args)
BtcUtils_num2str = _CppBlockUtils.BtcUtils_num2str

def BtcUtils_pprintScript(*args):
  return _CppBlockUtils.BtcUtils_pprintScript(*args)
BtcUtils_pprintScript = _CppBlockUtils.BtcUtils_pprintScript

def BtcUtils_verifyProofOfWork(*args):
  return _CppBlockUtils.BtcUtils_verifyProofOfWork(*args)
BtcUtils_verifyProofOfWork = _CppBlockUtils.BtcUtils_verifyProofOfWork

DEFAULT_KDF_MAX_MEMORY = _CppBlockUtils.DEFAULT_KDF_MAX_MEMORY
class SecureBinaryData:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecureBinaryData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SecureBinaryData, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _CppBlockUtils.delete_SecureBinaryData
    __del__ = lambda self : None;
    def getPtr(self, *args): return _CppBlockUtils.SecureBinaryData_getPtr(self, *args)
    def getSize(self): return _CppBlockUtils.SecureBinaryData_getSize(self)
    def copy(self): return _CppBlockUtils.SecureBinaryData_copy(self)
    def toHexStr(self, BE = False): return _CppBlockUtils.SecureBinaryData_toHexStr(self, BE)
    def toBinStr(self): return _CppBlockUtils.SecureBinaryData_toBinStr(self)
    def __init__(self, *args): 
        this = _CppBlockUtils.new_SecureBinaryData(*args)
        try: self.this.append(this)
        except: self.this = this
    def resize(self, *args): return _CppBlockUtils.SecureBinaryData_resize(self, *args)
    def reserve(self, *args): return _CppBlockUtils.SecureBinaryData_reserve(self, *args)
    def getRawCopy(self): return _CppBlockUtils.SecureBinaryData_getRawCopy(self)
    def getRawRef(self): return _CppBlockUtils.SecureBinaryData_getRawRef(self)
    def copySwapEndian(self, pos1 = 0, pos2 = 0): return _CppBlockUtils.SecureBinaryData_copySwapEndian(self, pos1, pos2)
    def append(self, *args): return _CppBlockUtils.SecureBinaryData_append(self, *args)
    def __add__(self, *args): return _CppBlockUtils.SecureBinaryData___add__(self, *args)
    def __eq__(self, *args): return _CppBlockUtils.SecureBinaryData___eq__(self, *args)
    def getHash256(self): return _CppBlockUtils.SecureBinaryData_getHash256(self)
    def getHash160(self): return _CppBlockUtils.SecureBinaryData_getHash160(self)
    def GenerateRandom(self, *args): return _CppBlockUtils.SecureBinaryData_GenerateRandom(self, *args)
    def lockData(self): return _CppBlockUtils.SecureBinaryData_lockData(self)
    def destroy(self): return _CppBlockUtils.SecureBinaryData_destroy(self)
SecureBinaryData_swigregister = _CppBlockUtils.SecureBinaryData_swigregister
SecureBinaryData_swigregister(SecureBinaryData)

class KdfRomix:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KdfRomix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KdfRomix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CppBlockUtils.new_KdfRomix(*args)
        try: self.this.append(this)
        except: self.this = this
    def computeKdfParams(self, targetComputeSec = 0.25, maxMemReqtsBytes = 32*1024*1024): return _CppBlockUtils.KdfRomix_computeKdfParams(self, targetComputeSec, maxMemReqtsBytes)
    def usePrecomputedKdfParams(self, *args): return _CppBlockUtils.KdfRomix_usePrecomputedKdfParams(self, *args)
    def printKdfParams(self): return _CppBlockUtils.KdfRomix_printKdfParams(self)
    def DeriveKey_OneIter(self, *args): return _CppBlockUtils.KdfRomix_DeriveKey_OneIter(self, *args)
    def DeriveKey(self, *args): return _CppBlockUtils.KdfRomix_DeriveKey(self, *args)
    def getHashFunctionName(self): return _CppBlockUtils.KdfRomix_getHashFunctionName(self)
    def getMemoryReqtBytes(self): return _CppBlockUtils.KdfRomix_getMemoryReqtBytes(self)
    def getNumIterations(self): return _CppBlockUtils.KdfRomix_getNumIterations(self)
    def getSalt(self): return _CppBlockUtils.KdfRomix_getSalt(self)
    __swig_destroy__ = _CppBlockUtils.delete_KdfRomix
    __del__ = lambda self : None;
KdfRomix_swigregister = _CppBlockUtils.KdfRomix_swigregister
KdfRomix_swigregister(KdfRomix)

class CryptoAES:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CryptoAES, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CryptoAES, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _CppBlockUtils.new_CryptoAES()
        try: self.this.append(this)
        except: self.this = this
    def EncryptCFB(self, *args): return _CppBlockUtils.CryptoAES_EncryptCFB(self, *args)
    def DecryptCFB(self, *args): return _CppBlockUtils.CryptoAES_DecryptCFB(self, *args)
    def EncryptCBC(self, *args): return _CppBlockUtils.CryptoAES_EncryptCBC(self, *args)
    def DecryptCBC(self, *args): return _CppBlockUtils.CryptoAES_DecryptCBC(self, *args)
    __swig_destroy__ = _CppBlockUtils.delete_CryptoAES
    __del__ = lambda self : None;
CryptoAES_swigregister = _CppBlockUtils.CryptoAES_swigregister
CryptoAES_swigregister(CryptoAES)

class CryptoECDSA:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CryptoECDSA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CryptoECDSA, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _CppBlockUtils.new_CryptoECDSA()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["CreateNewPrivateKey"] = lambda x: _CppBlockUtils.CryptoECDSA_CreateNewPrivateKey
    __swig_getmethods__["ParsePrivateKey"] = lambda x: _CppBlockUtils.CryptoECDSA_ParsePrivateKey
    __swig_getmethods__["ParsePublicKey"] = lambda x: _CppBlockUtils.CryptoECDSA_ParsePublicKey
    __swig_getmethods__["SerializePrivateKey"] = lambda x: _CppBlockUtils.CryptoECDSA_SerializePrivateKey
    __swig_getmethods__["SerializePublicKey"] = lambda x: _CppBlockUtils.CryptoECDSA_SerializePublicKey
    __swig_getmethods__["Get_secp256k1_ECP"] = lambda x: _CppBlockUtils.CryptoECDSA_Get_secp256k1_ECP
    def GenerateNewPrivateKey(self): return _CppBlockUtils.CryptoECDSA_GenerateNewPrivateKey(self)
    def ComputePublicKey(self, *args): return _CppBlockUtils.CryptoECDSA_ComputePublicKey(self, *args)
    def VerifyPublicKeyValid(self, *args): return _CppBlockUtils.CryptoECDSA_VerifyPublicKeyValid(self, *args)
    def CheckPubPrivKeyMatch(self, *args): return _CppBlockUtils.CryptoECDSA_CheckPubPrivKeyMatch(self, *args)
    def SignData(self, *args): return _CppBlockUtils.CryptoECDSA_SignData(self, *args)
    def VerifyData(self, *args): return _CppBlockUtils.CryptoECDSA_VerifyData(self, *args)
    def ComputeChainedPrivateKey(self, *args): return _CppBlockUtils.CryptoECDSA_ComputeChainedPrivateKey(self, *args)
    def ComputeChainedPublicKey(self, *args): return _CppBlockUtils.CryptoECDSA_ComputeChainedPublicKey(self, *args)
    def ECVerifyPoint(self, *args): return _CppBlockUtils.CryptoECDSA_ECVerifyPoint(self, *args)
    def ECMultiplyScalars(self, *args): return _CppBlockUtils.CryptoECDSA_ECMultiplyScalars(self, *args)
    def ECMultiplyPoint(self, *args): return _CppBlockUtils.CryptoECDSA_ECMultiplyPoint(self, *args)
    def ECAddPoints(self, *args): return _CppBlockUtils.CryptoECDSA_ECAddPoints(self, *args)
    def ECInverse(self, *args): return _CppBlockUtils.CryptoECDSA_ECInverse(self, *args)
    def CompressPoint(self, *args): return _CppBlockUtils.CryptoECDSA_CompressPoint(self, *args)
    def UncompressPoint(self, *args): return _CppBlockUtils.CryptoECDSA_UncompressPoint(self, *args)
    __swig_destroy__ = _CppBlockUtils.delete_CryptoECDSA
    __del__ = lambda self : None;
CryptoECDSA_swigregister = _CppBlockUtils.CryptoECDSA_swigregister
CryptoECDSA_swigregister(CryptoECDSA)

def CryptoECDSA_CreateNewPrivateKey():
  return _CppBlockUtils.CryptoECDSA_CreateNewPrivateKey()
CryptoECDSA_CreateNewPrivateKey = _CppBlockUtils.CryptoECDSA_CreateNewPrivateKey

def CryptoECDSA_ParsePrivateKey(*args):
  return _CppBlockUtils.CryptoECDSA_ParsePrivateKey(*args)
CryptoECDSA_ParsePrivateKey = _CppBlockUtils.CryptoECDSA_ParsePrivateKey

def CryptoECDSA_ParsePublicKey(*args):
  return _CppBlockUtils.CryptoECDSA_ParsePublicKey(*args)
CryptoECDSA_ParsePublicKey = _CppBlockUtils.CryptoECDSA_ParsePublicKey

def CryptoECDSA_SerializePrivateKey(*args):
  return _CppBlockUtils.CryptoECDSA_SerializePrivateKey(*args)
CryptoECDSA_SerializePrivateKey = _CppBlockUtils.CryptoECDSA_SerializePrivateKey

def CryptoECDSA_SerializePublicKey(*args):
  return _CppBlockUtils.CryptoECDSA_SerializePublicKey(*args)
CryptoECDSA_SerializePublicKey = _CppBlockUtils.CryptoECDSA_SerializePublicKey

def CryptoECDSA_Get_secp256k1_ECP():
  return _CppBlockUtils.CryptoECDSA_Get_secp256k1_ECP()
CryptoECDSA_Get_secp256k1_ECP = _CppBlockUtils.CryptoECDSA_Get_secp256k1_ECP



